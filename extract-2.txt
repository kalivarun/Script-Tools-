# Brave Browser Encrypted Password Extraction Script
# Extracts encrypted password data for future decryption

param(
    [string]$CSVPath = ".\BraveEncryptedPasswords.csv",
    [string]$JSONPath = ".\BraveEncryptedData.json"
)

Write-Host "Brave Encrypted Password Extraction Tool" -ForegroundColor Green
Write-Host "========================================" -ForegroundColor Green

# Function to install SQLite3 if needed
function Install-SQLiteIfNeeded {
    try {
        Write-Host "Downloading SQLite3..." -ForegroundColor Yellow
        $sqliteUrl = "https://www.sqlite.org/2023/sqlite-tools-win32-x86-3430200.zip"
        $tempZip = "sqlite-temp.zip"
        
        Invoke-WebRequest -Uri $sqliteUrl -OutFile $tempZip -UseBasicParsing
        Expand-Archive -Path $tempZip -DestinationPath ".\sqlite-temp" -Force
        Copy-Item ".\sqlite-temp\sqlite-tools-win32-x86-3430200\sqlite3.exe" ".\sqlite3.exe" -Force
        
        Remove-Item $tempZip -Force -ErrorAction SilentlyContinue
        Remove-Item ".\sqlite-temp" -Recurse -Force -ErrorAction SilentlyContinue
        
        Write-Host "SQLite3 downloaded successfully." -ForegroundColor Green
        return $true
    } catch {
        Write-Host "Failed to download SQLite3: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Function to extract master key from Brave's Local State file
function Get-BraveMasterKey {
    $braveDataPath = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data"
    $localStatePath = Join-Path $braveDataPath "Local State"
    
    if (-not (Test-Path $localStatePath)) {
        Write-Host "Local State file not found." -ForegroundColor Red
        return $null
    }
    
    try {
        Write-Host "Reading Local State file..." -ForegroundColor Yellow
        $localStateContent = Get-Content $localStatePath -Raw | ConvertFrom-Json
        $encryptedKey = $localStateContent.os_crypt.encrypted_key
        
        if (-not $encryptedKey) {
            Write-Host "No encrypted key found in Local State" -ForegroundColor Yellow
            return $null
        }
        
        Write-Host "Found encrypted master key" -ForegroundColor Green
        
        # Return the base64 encoded master key for future use
        return @{
            EncryptedKey = $encryptedKey
            KeyLength = ([System.Convert]::FromBase64String($encryptedKey)).Length
            ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        }
        
    } catch {
        Write-Host "Error extracting master key: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Function to extract encrypted passwords from Brave browser
function Get-BraveEncryptedPasswords {
    $braveDataPath = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data"
    $loginDataPath = Join-Path $braveDataPath "Default\Login Data"
    
    if (-not (Test-Path $loginDataPath)) {
        Write-Host "Brave login database not found." -ForegroundColor Red
        return @()
    }
    
    Write-Host "Found Brave login database" -ForegroundColor Green
    
    $results = @()
    $encryptedData = @()
    
    try {
        # Copy the database to avoid locking issues
        $tempDbPath = "temp_brave.db"
        Copy-Item $loginDataPath $tempDbPath -Force
        
        # Export data using SQLite
        $tempCsvPath = "temp_brave_output.csv"
        
        if (Test-Path ".\sqlite3.exe") {
            $sqlitePath = ".\sqlite3.exe"
        } else {
            $sqlitePath = "sqlite3"
        }
        
        # Query the database - get both hex and base64 representations
        $query = @"
SELECT 
    origin_url, 
    username_value, 
    hex(password_value) as password_hex,
    quote(password_value) as password_quoted,
    length(password_value) as password_length
FROM logins;
"@
        & $sqlitePath -csv -header $tempDbPath $query > $tempCsvPath
        
        if (Test-Path $tempCsvPath) {
            $logins = Import-Csv $tempCsvPath
            Write-Host "Found $($logins.Count) login entries in Brave" -ForegroundColor Green
            
            $counter = 0
            foreach ($login in $logins) {
                $counter++
                
                # Create a unique identifier for this entry
                $entryId = [System.Guid]::NewGuid().ToString()
                
                # Store encrypted data for future decryption
                $encryptedEntry = @{
                    Id = $entryId
                    URL = $login.origin_url
                    Username = $login.username_value
                    HexData = $login.password_hex
                    DataLength = $login.password_length
                    EncryptionVersion = "Unknown"
                    ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                }
                
                # Try to detect encryption version
                if ($login.password_hex -and $login.password_hex -match "^[0-9A-Fa-f]+$") {
                    try {
                        $hexString = $login.password_hex
                        if ($hexString.Length -ge 6) {
                            $prefixBytes = [System.Convert]::ToByte($hexString.Substring(0, 2), 16), 
                                          [System.Convert]::ToByte($hexString.Substring(2, 2), 16),
                                          [System.Convert]::ToByte($hexString.Substring(4, 2), 16)
                            $prefix = [System.Text.Encoding]::ASCII.GetString($prefixBytes)
                            
                            if ($prefix -eq "v10" -or $prefix -eq "v11" -or $prefix -eq "v20") {
                                $encryptedEntry.EncryptionVersion = $prefix
                            }
                        }
                    } catch {
                        # Ignore detection errors
                    }
                }
                
                $encryptedData += $encryptedEntry
                
                # Add to results for CSV
                $results += [PSCustomObject]@{
                    ID = $entryId
                    Browser = "Brave"
                    URL = $login.origin_url
                    Username = $login.username_value
                    EncryptionVersion = $encryptedEntry.EncryptionVersion
                    DataLength = $login.password_length
                    HexData = if ($login.password_hex.Length -gt 100) { 
                                $login.password_hex.Substring(0, 100) + "..." 
                              } else { 
                                $login.password_hex 
                              }
                    ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                }
                
                # Show progress
                if ($counter % 10 -eq 0) {
                    Write-Host "Processed $counter entries..." -ForegroundColor Cyan
                }
            }
            
            Remove-Item $tempCsvPath -Force -ErrorAction SilentlyContinue
        }
        
        Remove-Item $tempDbPath -Force -ErrorAction SilentlyContinue
        
        # Return both the summary and detailed encrypted data
        return @{
            Summary = $results
            DetailedData = $encryptedData
        }
        
    } catch {
        Write-Host "Error processing Brave data: $($_.Exception.Message)" -ForegroundColor Red
        return @{
            Summary = @()
            DetailedData = @()
        }
    }
}

# Main execution
if (-not (Test-Path ".\sqlite3.exe")) {
    if (-not (Install-SQLiteIfNeeded)) {
        Write-Host "SQLite3 is required. Exiting." -ForegroundColor Red
        exit 1
    }
}

Write-Host "Starting Brave encrypted password extraction..." -ForegroundColor Green

# Extract master key information
$masterKeyInfo = Get-BraveMasterKey

# Extract encrypted passwords
$extractionResult = Get-BraveEncryptedPasswords
$summaryData = $extractionResult.Summary
$detailedData = $extractionResult.DetailedData

# Display results
if ($summaryData.Count -gt 0) {
    Write-Host "`nSuccessfully extracted $($summaryData.Count) encrypted passwords!" -ForegroundColor Green
    
    # Export summary to CSV
    try {
        $summaryData | Export-Csv -Path $CSVPath -NoTypeInformation -Encoding UTF8 -Force
        Write-Host "Summary exported to: $CSVPath" -ForegroundColor Green
    } catch {
        Write-Host "CSV export failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # Export detailed data to JSON
    try {
        $exportData = @{
            Metadata = @{
                ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                Browser = "Brave"
                BrowserVersion = "Unknown"
                OS = [System.Environment]::OSVersion.VersionString
            }
            MasterKey = $masterKeyInfo
            EncryptedPasswords = $detailedData
        }
        
        $exportData | ConvertTo-Json -Depth 10 | Out-File -FilePath $JSONPath -Encoding UTF8
        Write-Host "Detailed encrypted data exported to: $JSONPath" -ForegroundColor Green
    } catch {
        Write-Host "JSON export failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    # Show summary
    Write-Host "`nEncryption Version Summary:" -ForegroundColor Cyan
    $encryptionStats = $summaryData | Group-Object EncryptionVersion | ForEach-Object {
        [PSCustomObject]@{
            Version = if ($_.Name) { $_.Name } else { "Unknown" }
            Count = $_.Count
            Percentage = "$([math]::Round(($_.Count / $summaryData.Count) * 100, 2))%"
        }
    }
    
    $encryptionStats | Format-Table -AutoSize
    
    Write-Host "`nSample of extracted data:" -ForegroundColor Cyan
    $summaryData | Select-Object -First 5 | Format-Table -Property URL, Username, EncryptionVersion, DataLength -AutoSize
    
    # Important information for future decryption
    Write-Host "`nIMPORTANT FOR FUTURE DECRYPTION:" -ForegroundColor Yellow
    Write-Host "1. Keep the JSON file safe - it contains all encrypted data" -ForegroundColor Yellow
    Write-Host "2. The master key is encrypted with DPAPI and tied to your user account" -ForegroundColor Yellow
    Write-Host "3. To decrypt in the future, you'll need:" -ForegroundColor Yellow
    Write-Host "   - This JSON file" -ForegroundColor Yellow
    Write-Host "   - Access to the same Windows user account" -ForegroundColor Yellow
    Write-Host "   - The Brave browser data directory" -ForegroundColor Yellow
    Write-Host "4. Most passwords use v20 encryption - newer tools may support this" -ForegroundColor Yellow
    
} else {
    Write-Host "No encrypted passwords found in Brave." -ForegroundColor Yellow
}

Write-Host "`nEncrypted data extraction completed." -ForegroundColor Green
