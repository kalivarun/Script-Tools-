import platform
import subprocess
import ipaddress
import sys
from concurrent.futures import ThreadPoolExecutor, as_completed

GREEN = "\033[32m"
RESET = "\033[0m"

def ping(ip):
    param = "-n" if platform.system().lower() == "windows" else "-c"
    try:
        result = subprocess.run(["ping", param, "1", "-w", "100", str(ip)],
                                stdout=subprocess.PIPE,
                                stderr=subprocess.PIPE,
                                text=True)
        if "ttl" in result.stdout.lower():
            return str(ip)
    except Exception:
        pass
    return None

def get_mac(ip):
    try:
        if platform.system().lower() == "windows":
            result = subprocess.check_output(["arp", "-a", ip], text=True)
        else:
            result = subprocess.check_output(["arp", "-n", ip], text=True)
        for line in result.splitlines():
            if ip in line:
                parts = line.split()
                for part in parts:
                    if ":" in part or "-" in part:
                        return part
    except Exception:
        pass
    return "Unknown"

def main():
    print("+" + "-" * 80 + "+")
    for _ in range(3):
        print("|" + " " * 80 + "|")
    print("|" + GREEN + "                    Scanning local network for active IPs...                   " + RESET + "|")
    for _ in range(2):
        print("|" + " " * 80 + "|")

    # Use CLI argument or input
    if len(sys.argv) > 1:
        subnet_input = sys.argv[1]
    else:
        try:
            subnet_input = input("Enter subnet (e.g., 192.168.1): ").strip()
        except EOFError:
            print("Input failed. Use: python script.py <subnet>")
            return

    base_ip = f"{subnet_input}.0/24"

    try:
        network = ipaddress.ip_network(base_ip, strict=False)
    except ValueError:
        print("Invalid subnet.")
        return

    active_ips = []
    print("Scanning...")
    with ThreadPoolExecutor(max_workers=100) as executor:
        futures = {executor.submit(ping, ip): ip for ip in network.hosts()}
        for future in as_completed(futures):
            ip = future.result()
            if ip:
                mac = get_mac(ip)
                print(f"{GREEN}Active: {ip} - MAC: {mac}{RESET}")
                active_ips.append((ip, mac))

    print("\nScan complete.")
    print(f"Total active IPs: {len(active_ips)}")
    print("+" + "-" * 80 + "+")

if __name__ == "__main__":
    main()
