# PowerShell script to fetch usernames and passwords from installed browsers
Write-Host "Fetching usernames and passwords from installed browsers..." -ForegroundColor Green

# Load SQLite assembly (requires System.Data.SQLite NuGet package)
try {
    Add-Type -Path "$env:USERPROFILE\.nuget\packages\system.data.sqlite.core\*\lib\netstandard2.0\System.Data.SQLite.dll" -ErrorAction Stop
} catch {
    Write-Host "Error: System.Data.SQLite not found. Install it via 'Install-Package System.Data.SQLite -Scope CurrentUser -Force'" -ForegroundColor Red
    exit
}

# Define browsers and their user data paths
$browsers = @{
    "Google Chrome" = @{
        DataPath = "$env:LocalAppData\Google\Chrome\User Data"
        RegistryName = "Google Chrome"
    }
    "Brave" = @{
        DataPath = "$env:LocalAppData\BraveSoftware\Brave-Browser\User Data"
        RegistryName = "Brave"
    }
    "Microsoft Edge" = @{
        DataPath = "$env:LocalAppData\Microsoft\Edge\User Data"
        RegistryName = "Microsoft Edge"
    }
}

# Initialize counter for total browsers found
$totalBrowsers = 0

# Function to check if browser is installed via registry
function Test-BrowserInstalled {
    param (
        [string]$regPath,
        [string]$browserName
    )

    if (Test-Path $regPath) {
        $apps = Get-ItemProperty -Path $regPath -ErrorAction SilentlyContinue
        foreach ($app in $apps) {
            if ($app.DisplayName -like "*$browserName*" -and $app.DisplayName -notlike "*WebView*") {
                return $true
            }
        }
    }
    return $false
}

# Function to decrypt password (Chromium-based browsers use Windows DPAPI)
function Get-DecryptedPassword {
    param (
        [byte[]]$encryptedPassword
    )

    try {
        $decryptedBytes = [System.Security.Cryptography.ProtectedData]::Unprotect($encryptedPassword, $null, [System.Security.Cryptography.DataProtectionScope]::CurrentUser)
        return [System.Text.Encoding]::UTF8.GetString($decryptedBytes)
    } catch {
        return "Failed to decrypt"
    }
}

# Function to fetch passwords from a SQLite database
function Get-PasswordsFromDatabase {
    param (
        [string]$dbPath,
        [string]$browser
    )

    if (-not (Test-Path $dbPath)) {
        Write-Host "$browser database not found: $dbPath" -ForegroundColor Red
        return
    }

    try {
        $conn = New-Object -TypeName System.Data.SQLite.SQLiteConnection -ArgumentList "Data Source=$dbPath;Version=3;"
        $conn.Open()

        $cmd = $conn.CreateCommand()
        $cmd.CommandText = "SELECT origin_url, username_value, password_value FROM logins"
        $reader = $cmd.ExecuteReader()

        Write-Host "`nPasswords for $browser:" -ForegroundColor Cyan
        Write-Host "----------------------------------------"
        $found = $false
        while ($reader.Read()) {
            $url = $reader["origin_url"]
            $username = $reader["username_value"]
            $encryptedPassword = $reader["password_value"] -as [byte[]]

            if ($username -and $encryptedPassword) {
                $password = Get-DecryptedPassword -encryptedPassword $encryptedPassword
                Write-Host "Website: $url"
                Write-Host "Username: $username"
                Write-Host "Password: $password"
                Write-Host "----------------------------------------"
                $found = $true
            }
        }

        if (-not $found) {
            Write-Host "No passwords found in $dbPath" -ForegroundColor Yellow
        }

        $reader.Close()
        $conn.Close()
    } catch {
        Write-Host "Error accessing $dbPath for $browser : $_" -ForegroundColor Red
    }
}

# Registry paths for installed programs (32-bit and 64-bit)
$registryPaths = @(
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"
)

# Check installed browsers and fetch passwords
foreach ($browser in $browsers.Keys) {
    $isInstalled = $false
    foreach ($path in $registryPaths) {
        if (Test-BrowserInstalled -regPath $path -browserName $browsers[$browser].RegistryName) {
            $isInstalled = $true
            break
        }
    }

    if ($isInstalled) {
        $script:totalBrowsers++
        Write-Host "`nProcessing $browser..." -ForegroundColor Green

        # Check Default profile
        $loginDataPath = Join-Path $browsers[$browser].DataPath "Default\Login Data"
        $loginDataAccountPath = Join-Path $browsers[$browser].DataPath "Default\Login Data For Account"

        Get-PasswordsFromDatabase -dbPath $loginDataPath -browser "$browser (Local)"
        Get-PasswordsFromDatabase -dbPath $loginDataAccountPath -browser "$browser (Synced)"

        # Check for additional profiles (e.g., Profile 1, Profile 2)
        $userDataPath = $browsers[$browser].DataPath
        if (Test-Path $userDataPath) {
            $profiles = Get-ChildItem -Path $userDataPath -Directory | Where-Object { $_.Name -like "Profile *" }
            foreach ($profile in $profiles) {
                $profileLoginDataPath = Join-Path $profile.FullName "Login Data"
                $profileLoginDataAccountPath = Join-Path $profile.FullName "Login Data For Account"
                Get-PasswordsFromDatabase -dbPath $profileLoginDataPath -browser "$browser ($($profile.Name) - Local)"
                Get-PasswordsFromDatabase -dbPath $profileLoginDataAccountPath -browser "$browser ($($profile.Name) - Synced)"
            }
        }
    }
}

# Final output
Write-Host "`nTotal browsers with data processed: $totalBrowsers" -ForegroundColor Yellow
Write-Host "Note: Passwords are decrypted for display only. No data has been saved to disk." -ForegroundColor Yellow
Write-Host "To access passwords later, use NirSoft ChromePass or restore to a working browser." -ForegroundColor Yellow
