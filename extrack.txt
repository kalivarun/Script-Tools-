# PowerShell script to detect installed browsers and back up their saved data (user profiles, including passwords)
Write-Host "Detecting installed browsers and backing up saved data..." -ForegroundColor Green

# Prompt for backup directory
$backupDir = Read-Host "Enter the backup directory path (e.g., C:\Users\$env:USERNAME\OneDrive\Desktop\BrowserBackup)"
if (-not (Test-Path $backupDir)) {
    New-Item -ItemType Directory -Path $backupDir -Force | Out-Null
    Write-Host "Created backup directory: $backupDir" -ForegroundColor Yellow
}

# Define common browsers and their registry display names
$browsers = @{
    "Google Chrome" = "Google Chrome"
    "Mozilla Firefox" = "Firefox"
    "Microsoft Edge" = "Microsoft Edge"
    "Safari" = "Safari"
    "Opera" = "Opera"
    "Brave" = "Brave"
}

# Define user data paths for each browser (where saved data like passwords is stored)
$userDataPaths = @{
    "Google Chrome" = "$env:LocalAppData\Google\Chrome\User Data"
    "Brave" = "$env:LocalAppData\BraveSoftware\Brave-Browser\User Data"
    "Microsoft Edge" = "$env:LocalAppData\Microsoft\Edge\User Data"
    "Mozilla Firefox" = "$env:AppData\Mozilla\Firefox\Profiles"
    "Opera" = "$env:AppData\Opera Software\Opera Stable"
    "Safari" = "$env:AppData\Apple Computer\Safari"
}

# Initialize counter for total browsers found
$totalBrowsers = 0

# Function to check registry for installed programs
function Get-InstalledBrowsers {
    param (
        [string]$regPath
    )

    if (Test-Path $regPath) {
        $apps = Get-ItemProperty -Path $regPath -ErrorAction SilentlyContinue

        foreach ($app in $apps) {
            $appName = $app.DisplayName
            foreach ($browser in $browsers.Keys) {
                if ($appName -like "*$($browsers[$browser])*" -and $appName -notlike "*WebView*") {
                    $installPath = $app.InstallLocation
                    if (-not $installPath) {
                        if ($app.UninstallString) {
                            $installPath = Split-Path $app.UninstallString -Parent
                        } else {
                            $installPath = "Path not found"
                        }
                    }
                    Write-Host "Browser: $browser" -ForegroundColor Cyan
                    Write-Host "Display Name: $appName"
                    Write-Host "Install Path: $installPath"
                    Write-Host "----------------------------------------"
                    $script:totalBrowsers++

                    # Back up saved data if user data path exists
                    $dataPath = $userDataPaths[$browser]
                    if (Test-Path $dataPath) {
                        $backupPath = Join-Path $backupDir "$browser"
                        if (-not (Test-Path $backupPath)) {
                            New-Item -ItemType Directory -Path $backupPath -Force | Out-Null
                        }
                        Write-Host "Backing up saved data for $browser from $dataPath to $backupPath..." -ForegroundColor Green
                        Copy-Item -Path $dataPath -Destination $backupPath -Recurse -Force
                        Write-Host "Backup completed for $browser." -ForegroundColor Yellow
                    } else {
                        Write-Host "User data path not found for $browser: $dataPath" -ForegroundColor Red
                    }
                }
            }
        }
    }
}

# Registry paths for installed programs (32-bit and 64-bit)
$registryPaths = @(
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"
)

# Loop through registry paths
foreach ($path in $registryPaths) {
    Get-InstalledBrowsers -regPath $path
}

# Output total number of browsers found and backed up
Write-Host "Total number of browsers detected and backed up: $totalBrowsers" -ForegroundColor Yellow

# Optional: Check common default paths for browsers
$commonPaths = @{
    "Google Chrome" = "$env:ProgramFiles\Google\Chrome\Application\chrome.exe"
    "Mozilla Firefox" = "$env:ProgramFiles\Mozilla Firefox\firefox.exe"
    "Microsoft Edge" = "$env:ProgramFiles (x86)\Microsoft\Edge\Application\msedge.exe"
    "Safari" = "$env:ProgramFiles\Safari\Safari.exe"
    "Opera" = "$env:ProgramFiles\Opera\opera.exe"
    "Brave" = "$env:ProgramFiles\BraveSoftware\Brave-Browser\Application\brave.exe"
}

Write-Host "`nChecking common default paths for browsers..." -ForegroundColor Green
foreach ($browser in $commonPaths.Keys) {
    if (Test-Path $commonPaths[$browser]) {
        Write-Host "Browser: $browser" -ForegroundColor Cyan
        Write-Host "Found at default path: $($commonPaths[$browser])"
        Write-Host "----------------------------------------"
        # Check if already counted; if not, increment and back up
        $alreadyFound = $false
        foreach ($path in $registryPaths) {
            if (Test-Path $path) {
                $apps = Get-ItemProperty -Path $path -ErrorAction SilentlyContinue
                foreach ($app in $apps) {
                    if ($app.DisplayName -like "*$($browsers[$browser])*" -and $app.DisplayName -notlike "*WebView*") {
                        $alreadyFound = $true
                        break
                    }
                }
            }
        }
        if (-not $alreadyFound) {
            $script:totalBrowsers++
            # Back up if not already done
            $dataPath = $userDataPaths[$browser]
            if (Test-Path $dataPath) {
                $backupPath = Join-Path $backupDir "$browser"
                if (-not (Test-Path $backupPath)) {
                    New-Item -ItemType Directory -Path $backupPath -Force | Out-Null
                }
                Write-Host "Backing up saved data for $browser from $dataPath to $backupPath..." -ForegroundColor Green
                Copy-Item -Path $dataPath -Destination $backupPath -Recurse -Force
                Write-Host "Backup completed for $browser." -ForegroundColor Yellow
            }
        }
    }
}

# Final output
Write-Host "Final count of browsers detected and backed up: $totalBrowsers" -ForegroundColor Yellow
Write-Host "All saved data (including passwords, bookmarks, etc.) has been backed up to: $backupDir" -ForegroundColor Green
Write-Host "Note: Passwords are encrypted in the backup. To view them, use a tool like NirSoft ChromePass on a working system." -ForegroundColor Yellow
