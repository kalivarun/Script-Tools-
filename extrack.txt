# PowerShell script to fetch usernames and passwords from installed browsers without dependencies
Write-Host "Fetching usernames and passwords from installed browsers..." -ForegroundColor Green

# Define browsers and their user data paths
$browsers = @{
    "Google Chrome" = @{
        DataPath = "$env:LocalAppData\Google\Chrome\User Data"
        RegistryName = "Google Chrome"
    }
    "Brave" = @{
        DataPath = "$env:LocalAppData\BraveSoftware\Brave-Browser\User Data"
        RegistryName = "Brave"
    }
    "Microsoft Edge" = @{
        DataPath = "$env:LocalAppData\Microsoft\Edge\User Data"
        RegistryName = "Microsoft Edge"
    }
}

# Initialize counter for total browsers found
$totalBrowsers = 0

# Function to check if browser is installed via registry
function Test-BrowserInstalled {
    param (
        [string]$regPath,
        [string]$browserName
    )

    if (Test-Path $regPath) {
        $apps = Get-ItemProperty -Path $regPath -ErrorAction SilentlyContinue
        foreach ($app in $apps) {
            if ($app.DisplayName -like "*$browserName*" -and $app.DisplayName -notlike "*WebView*") {
                return $true
            }
        }
    }
    return $false
}

# Function to run ChromePass and fetch passwords
function Get-PasswordsFromDatabase {
    param (
        [string]$dbPath,
        [string]$browser,
        [string]$chromePassPath
    )

    if (-not (Test-Path $dbPath)) {
        Write-Host "$browser database not found - $dbPath" -ForegroundColor Red
        return
    }

    try {
        # Run ChromePass with command-line options to extract passwords
        $output = & $chromePassPath /scomma /external $dbPath
        Write-Host "`nPasswords for $browser" -ForegroundColor Cyan
        Write-Host "----------------------------------------"
        $found = $false

        # Parse ChromePass output (CSV format)
        $lines = $output -split "`n"
        foreach ($line in $lines) {
            if ($line -match '^"([^"]+)","([^"]*)","([^"]*)","([^"]*)","([^"]*)","([^"]*)"') {
                $url = $matches[1]
                $username = $matches[3]
                $password = $matches[4]
                if ($username -and $password) {
                    Write-Host "Website: $url"
                    Write-Host "Username: $username"
                    Write-Host "Password: $password"
                    Write-Host "----------------------------------------"
                    $found = $true
                }
            }
        }

        if (-not $found) {
            Write-Host "No passwords found in $dbPath" -ForegroundColor Yellow
        }
    } catch {
        Write-Host "Error accessing $dbPath for $browser - $_" -ForegroundColor Red
    }
}

# Create a temporary directory for ChromePass
$tempDir = "$env:TEMP\ChromePassTemp"
if (-not (Test-Path $tempDir)) {
    New-Item -ItemType Directory -Path $tempDir -Force | Out-Null
}

# Base64-encoded ChromePass executable (placeholder)
# Replace <BASE64_STRING> with the actual base64 string of ChromePass.exe
$chromePassBase64 = "<BASE64_STRING>"
$chromePassPath = "$tempDir\ChromePass.exe"

# Decode and save ChromePass executable
try {
    $bytes = [System.Convert]::FromBase64String($chromePassBase64)
    [System.IO.File]::WriteAllBytes($chromePassPath, $bytes)
} catch {
    Write-Host "Error: Failed to create ChromePass executable. Please provide a valid base64 string or place ChromePass.exe in $tempDir" -ForegroundColor Red
    exit
}

# Registry paths for installed programs (32-bit and 64-bit)
$registryPaths = @(
    "HKLM:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKLM:\Software\Wow6432Node\Microsoft\Windows\CurrentVersion\Uninstall\*",
    "HKCU:\Software\Microsoft\Windows\CurrentVersion\Uninstall\*"
)

# Check installed browsers and fetch passwords
foreach ($browser in $browsers.Keys) {
    $isInstalled = $false
    foreach ($path in $registryPaths) {
        if (Test-BrowserInstalled -regPath $path -browserName $browsers[$browser].RegistryName) {
            $isInstalled = $true
            break
        }
    }

    if ($isInstalled) {
        $script:totalBrowsers++
        Write-Host "`nProcessing $browser..." -ForegroundColor Green

        # Check Default profile
        $loginDataPath = Join-Path $browsers[$browser].DataPath "Default\Login Data"
        $loginDataAccountPath = Join-Path $browsers[$browser].DataPath "Default\Login Data For Account"

        Get-PasswordsFromDatabase -dbPath $loginDataPath -browser "$browser (Local)" -chromePassPath $chromePassPath
        Get-PasswordsFromDatabase -dbPath $loginDataAccountPath -browser "$browser (Synced)" -chromePassPath $chromePassPath

        # Check for additional profiles (e.g., Profile 1, Profile 2)
        $userDataPath = $browsers[$browser].DataPath
        if (Test-Path $userDataPath) {
            $profiles = Get-ChildItem -Path $userDataPath -Directory | Where-Object { $_.Name -like "Profile *" }
            foreach ($profile in $profiles) {
                $profileLoginDataPath = Join-Path $profile.FullName "Login Data"
                $profileLoginDataAccountPath = Join-Path $profile.FullName "Login Data For Account"
                Get-PasswordsFromDatabase -dbPath $profileLoginDataPath -browser "$browser ($($profile.Name) - Local)" -chromePassPath $chromePassPath
                Get-PasswordsFromDatabase -dbPath $profileLoginDataAccountPath -browser "$browser ($($profile.Name) - Synced)" -chromePassPath $chromePassPath
            }
        }
    }
}

# Clean up temporary ChromePass executable
if (Test-Path $chromePassPath) {
    Remove-Item -Path $chromePassPath -Force
}
if (Test-Path $tempDir) {
    Remove-Item -Path $tempDir -Recurse -Force
}

# Final output
Write-Host "`nTotal browsers with data processed: $totalBrowsers" -ForegroundColor Yellow
Write-Host "Note: Passwords are decrypted for display only. No data has been saved to disk." -ForegroundColor Yellow
Write-Host "To access passwords later, use NirSoft ChromePass or restore to a working browser." -ForegroundColor Yellow
