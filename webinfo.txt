function Get-WebsiteDeepInfo {
    param (
        [string]$Website
    )

    if (-not $Website) {
        $Website = Read-Host "Enter website (e.g., example.com)"
    }

    if (-not $Website.StartsWith("http")) {
        $Website = "https://$Website"
    }

    Write-Host "Fetching deep information for: $Website"
    Write-Host "--------------------------------------------------"

    try {
        # Fetch main page
        $response = Invoke-WebRequest -Uri $Website -UseBasicParsing -ErrorAction Stop
        Write-Host "`nStatus Code: $($response.StatusCode)"
        Write-Host "Status Description: $($response.StatusDescription)"

        # Print HTTP Headers
        Write-Host "`nHTTP Headers:"
        $response.Headers.GetEnumerator() | ForEach-Object { Write-Host "$($_.Name): $($_.Value)" }

        # Check Allowed Methods with OPTIONS
        try {
            $optionsResponse = Invoke-WebRequest -Uri $Website -Method OPTIONS -UseBasicParsing -ErrorAction Stop
            $allowedMethods = $optionsResponse.Headers.'Allow'
            Write-Host "`nAllowed HTTP Methods: $allowedMethods"
        }
        catch {
            Write-Host "`nCould not retrieve allowed HTTP methods."
        }

        # Extract all internal links from the page
        Write-Host "`nDiscovered internal links (endpoints):"
        $baseUri = [System.Uri]$Website
        $links = $response.Links | Where-Object {
            $_.href -and
            ($_.href.StartsWith("/") -or $_.href.StartsWith($baseUri.Scheme + "://" + $baseUri.Host))
        } | Select-Object -ExpandProperty href -Unique

        $endpointResults = @()
        foreach ($link in $links) {
            if ($link.StartsWith("/")) {
                $fullLink = "$($baseUri.Scheme)://$($baseUri.Host)$link"
            } else {
                $fullLink = $link
            }
            Write-Host $fullLink
            $endpointResults += $fullLink
        }

        # Backtrack endpoints to check for directory listings
        Write-Host "`nDirectory Listing Results (Backtracking):"
        Write-Host "--------------------------------------------------"
        foreach ($endpoint in $endpointResults) {
            try {
                $uri = [System.Uri]$endpoint
                $pathSegments = $uri.AbsolutePath.Split('/', [System.StringSplitOptions]::RemoveEmptyEntries)
                $baseUrl = "$($uri.Scheme)://$($uri.Host)"
                $pathsToCheck = @()

                # Build all parent paths
                $currentPath = ""
                for ($i = 0; $i -lt $pathSegments.Length; $i++) {
                    $currentPath += "/" + $pathSegments[$i]
                    $pathsToCheck += "$baseUrl$currentPath/"
                }

                # Check each parent path in reverse (from deepest to root)
                foreach ($path in ($pathsToCheck | Sort-Object -Descending)) {
                    try {
                        $endpointResponse = Invoke-WebRequest -Uri $path -UseBasicParsing -ErrorAction Stop -TimeoutSec 5
                        if ($endpointResponse.StatusCode -eq 200) {
                            $content = $endpointResponse.Content
                            $isDirectoryListing = $content -match "Index of" -or 
                                                 $content -match "<title>Index of" -or 
                                                 $content -match "<h1>Index of" -or 
                                                 $content -match "Parent Directory" -or 
                                                 $content -match "<table.*>(.*\bhref\b.*)+</table>"

                            if ($isDirectoryListing) {
                                Write-Host "Directory Listing Found: $path"
                            }
                        }
                    }
                    catch {
                        # Skip errors for individual paths (e.g., 404, timeout)
                        continue
                    }
                }
            }
            catch {
                Write-Host "Error processing endpoint $endpoint : $_" -ForegroundColor Red
            }
        }

        # Fetch and parse robots.txt
        $robotsUrl = "$($baseUri.Scheme)://$($baseUri.Host)/robots.txt"
        try {
            $robotsTxt = Invoke-WebRequest -Uri $robotsUrl -UseBasicParsing -ErrorAction Stop
            Write-Host "`nrobots.txt contents:"
            Write-Host $robotsTxt.Content
        }
        catch {
            Write-Host "`nNo robots.txt found or inaccessible."
        }

        # Fetch and parse sitemap.xml
        $sitemapUrl = "$($baseUri.Scheme)://$($baseUri.Host)/sitemap.xml"
        try {
            $sitemap = Invoke-WebRequest -Uri $sitemapUrl -UseBasicParsing -ErrorAction Stop
            [xml]$sitemapXml = $sitemap.Content
            Write-Host "`nSitemap URLs:"
            foreach ($url in $sitemapXml.urlset.url.loc) {
                Write-Host $url
            }
        }
        catch {
            Write-Host "`nNo sitemap.xml found or inaccessible."
        }

        # Basic Security Headers check
        $securityHeaders = @(
            "Content-Security-Policy",
            "X-Content-Type-Options",
            "X-Frame-Options",
            "Strict-Transport-Security",
            "Referrer-Policy",
            "Permissions-Policy"
        )
        Write-Host "`nSecurity Headers:"
        foreach ($header in $securityHeaders) {
            if ($response.Headers[$header]) {
                Write-Host "$header : $($response.Headers[$header])"
            }
            else {
                Write-Host "$header : NOT SET"
            }
        }

        # DNS resolution
        $hostname = $baseUri.Host
        $ips = [System.Net.Dns]::GetHostAddresses($hostname)
        Write-Host "`nResolved IP Addresses for ${hostname}:"
        $ips | ForEach-Object { Write-Host $_.IPAddressToString }

        # Final redirected URL
        if ($response.BaseResponse.ResponseUri -ne $Website) {
            Write-Host "`nFinal Redirect URL: $($response.BaseResponse.ResponseUri)"
        }
    }
    catch {
        Write-Host "Error: $_"
    }
}

# Run the function
Get-WebsiteDeepInfo
