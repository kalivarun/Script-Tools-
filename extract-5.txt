# Multi-Browser and Network Credential Extraction Script
# Extracts encrypted password data from Chrome, Edge, Brave, and Windows Credential Manager

param(
    [string]$CSVPath = ".\CredentialsSummary.csv",
    [string]$JSONPath = ".\CredentialsData.json"
)

Write-Host "Multi-Browser and Network Credential Extraction Tool" -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor Green

# Browser paths configuration
$browsers = @{
    "Chrome" = @{
        Path = "$env:LOCALAPPDATA\Google\Chrome\User Data"
        Name = "Google Chrome"
    }
    "Edge" = @{
        Path = "$env:LOCALAPPDATA\Microsoft\Edge\User Data"
        Name = "Microsoft Edge"
    }
    "Brave" = @{
        Path = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data"
        Name = "Brave Browser"
    }
}

# Function to install SQLite3 if needed
function Install-SQLiteIfNeeded {
    try {
        Write-Host "Downloading SQLite3..." -ForegroundColor Yellow
        $sqliteUrl = "https://www.sqlite.org/2023/sqlite-tools-win32-x86-3430200.zip"
        $tempZip = "sqlite-temp.zip"
        
        Invoke-WebRequest -Uri $sqliteUrl -OutFile $tempZip -UseBasicParsing
        Expand-Archive -Path $tempZip -DestinationPath ".\sqlite-temp" -Force
        Copy-Item ".\sqlite-temp\sqlite-tools-win32-x86-3430200\sqlite3.exe" ".\sqlite3.exe" -Force
        
        Remove-Item $tempZip -Force -ErrorAction SilentlyContinue
        Remove-Item ".\sqlite-temp" -Recurse -Force -ErrorAction SilentlyContinue
        
        Write-Host "SQLite3 downloaded successfully." -ForegroundColor Green
        return $true
    } catch {
        Write-Host "Failed to download SQLite3: $_" -ForegroundColor Red
        return $false
    }
}

# Function to extract master key from browser's Local State file
function Get-BrowserMasterKey {
    param(
        [string]$BrowserDataPath,
        [string]$BrowserName
    )
    
    $localStatePath = Join-Path $BrowserDataPath "Local State"
    
    if (-not (Test-Path $localStatePath)) {
        Write-Host "$BrowserName Local State file not found." -ForegroundColor Yellow
        return $null
    }
    
    try {
        Write-Host "Reading $BrowserName Local State file..." -ForegroundColor Yellow
        $localStateContent = Get-Content $localStatePath -Raw | ConvertFrom-Json
        $encryptedKey = $localStateContent.os_crypt.encrypted_key
        
        if (-not $encryptedKey) {
            Write-Host "No encrypted key found in $BrowserName Local State" -ForegroundColor Yellow
            return $null
        }
        
        Write-Host "Found encrypted master key for $BrowserName" -ForegroundColor Green
        
        return @{
            EncryptedKey = $encryptedKey
            KeyLength = ([System.Convert]::FromBase64String($encryptedKey)).Length
            ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            Browser = $BrowserName
        }
    } catch {
        Write-Host "Error extracting $BrowserName master key: $_" -ForegroundColor Red
        return $null
    }
}

# Function to find all login data files in browser profiles
function Get-BrowserLoginDataFiles {
    param(
        [string]$BrowserDataPath,
        [string]$BrowserName
    )
    
    $loginDataFiles = @()
    
    if (-not (Test-Path $BrowserDataPath)) {
        Write-Host "$BrowserName data directory not found: $BrowserDataPath" -ForegroundColor Yellow
        return $loginDataFiles
    }
    
    # Check default profile
    $defaultLoginData = Join-Path $BrowserDataPath "Default\Login Data"
    if (Test-Path $defaultLoginData) {
        $loginDataFiles += @{
            Path = $defaultLoginData
            Profile = "Default"
        }
    }
    
    # Check other profiles
    $profilePatterns = @("Profile *", "Profile*", "User *", "User*")
    
    foreach ($pattern in $profilePatterns) {
        $profileDirs = Get-ChildItem -Path $BrowserDataPath -Directory -Filter $pattern -ErrorAction SilentlyContinue
        foreach ($profileDir in $profileDirs) {
            $loginDataPath = Join-Path $profileDir.FullName "Login Data"
            if (Test-Path $loginDataPath) {
                $loginDataFiles += @{
                    Path = $loginDataPath
                    Profile = $profileDir.Name
                }
            }
        }
    }
    
    return $loginDataFiles
}

# Function to extract encrypted passwords from browser
function Get-BrowserEncryptedPasswords {
    param(
        [string]$BrowserDataPath,
        [string]$BrowserName,
        [string]$BrowserKey
    )
    
    $loginDataFiles = Get-BrowserLoginDataFiles -BrowserDataPath $BrowserDataPath -BrowserName $BrowserName
    
    if ($loginDataFiles.Count -eq 0) {
        Write-Host "No login database files found for $BrowserName." -ForegroundColor Yellow
        return @{
            Summary = @()
            DetailedData = @()
        }
    }
    
    Write-Host "Found $($loginDataFiles.Count) login database(s) for $BrowserName" -ForegroundColor Green
    
    $results = @()
    $encryptedData = @()
    
    foreach ($loginDataFile in $loginDataFiles) {
        $dbPath = $loginDataFile.Path
        $profileName = $loginDataFile.Profile
        
        Write-Host "  Processing profile: $profileName" -ForegroundColor Cyan
        
        try {
            # Copy the database to avoid locking issues
            $tempDbPath = "temp_$($BrowserKey)_$($profileName -replace '[^a-zA-Z0-9]', '_').db"
            Copy-Item $dbPath $tempDbPath -Force
            
            # Export data using SQLite
            $tempCsvPath = "temp_$($BrowserKey)_$($profileName -replace '[^a-zA-Z0-9]', '_').csv"
            
            if (Test-Path ".\sqlite3.exe") {
                $sqlitePath = ".\sqlite3.exe"
            } else {
                $sqlitePath = "sqlite3"
            }
            
            # Query the database
            $query = @"
SELECT 
    origin_url, 
    username_value, 
    hex(password_value) as password_hex,
    quote(password_value) as password_quoted,
    length(password_value) as password_length,
    date_created,
    date_last_used,
    times_used
FROM logins;
"@
            & $sqlitePath -csv -header $tempDbPath $query > $tempCsvPath
            
            if (Test-Path $tempCsvPath) {
                $logins = Import-Csv $tempCsvPath
                Write-Host "    Found $($logins.Count) login entries" -ForegroundColor Green
                
                $counter = 0
                foreach ($login in $logins) {
                    $counter++
                    
                    # Create a unique identifier
                    $entryId = [System.Guid]::NewGuid().ToString()
                    
                    # Store encrypted data
                    $encryptedEntry = @{
                        Id = $entryId
                        Type = "Browser"
                        Browser = $BrowserName
                        BrowserKey = $BrowserKey
                        Profile = $profileName
                        URL = $login.origin_url
                        Username = $login.username_value
                        HexData = $login.password_hex
                        DataLength = $login.password_length
                        EncryptionVersion = "Unknown"
                        DateCreated = $login.date_created
                        DateLastUsed = $login.date_last_used
                        TimesUsed = $login.times_used
                        ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    }
                    
                    # Detect encryption version
                    if ($login.password_hex -and $login.password_hex -match "^[0-9A-Fa-f]+$") {
                        try {
                            $hexString = $login.password_hex
                            if ($hexString.Length -ge 6) {
                                $prefixBytes = [System.Convert]::ToByte($hexString.Substring(0, 2), 16), 
                                              [System.Convert]::ToByte($hexString.Substring(2, 2), 16),
                                              [System.Convert]::ToByte($hexString.Substring(4, 2), 16)
                                $prefix = [System.Text.Encoding]::ASCII.GetString($prefixBytes)
                                
                                if ($prefix -eq "v10" -or $prefix -eq "v11" -or $prefix -eq "v20") {
                                    $encryptedEntry.EncryptionVersion = $prefix
                                }
                            }
                        } catch {
                            # Ignore detection errors
                        }
                    }
                    
                    $encryptedData += $encryptedEntry
                    
                    # Add to results for CSV
                    $results += [PSCustomObject]@{
                        ID = $entryId
                        Type = "Browser"
                        Browser = $BrowserName
                        Profile = $profileName
                        URL = $login.origin_url
                        Username = $login.username_value
                        EncryptionVersion = $encryptedEntry.EncryptionVersion
                        DataLength = $login.password_length
                        HexDataPreview = if ($login.password_hex.Length -gt 50) { 
                            $login.password_hex.Substring(0, 50) + "..." 
                        } else { 
                            $login.password_hex 
                        }
                        DateCreated = $login.date_created
                        DateLastUsed = $login.date_last_used
                        TimesUsed = $login.times_used
                        ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    }
                    
                    if ($counter % 10 -eq 0 -and $counter -gt 0) {
                        Write-Host "    Processed $counter entries..." -ForegroundColor Cyan
                    }
                }
                
                Remove-Item $tempCsvPath -Force -ErrorAction SilentlyContinue
            }
            
            Remove-Item $tempDbPath -Force -ErrorAction SilentlyContinue
            
        } catch {
            Write-Host "    Error processing $BrowserName profile $profileName: $_" -ForegroundColor Red
        }
    }
    
    return @{
        Summary = $results
        DetailedData = $encryptedData
    }
}

# Function to extract network credentials from Windows Credential Manager
function Get-NetworkCredentials {
    try {
        Write-Host "Extracting network credentials from Windows Credential Manager..." -ForegroundColor Yellow
        $results = @()
        $encryptedData = @()
        
        # Use cmdkey to list credentials (requires elevated privileges)
        $cmdkeyOutput = cmdkey /list
        $credentialPattern = "Target: (.+?)\n.*?Type: (.+?)\n.*?User: (.+?)\n"
        
        $matches = [regex]::Matches($cmdkeyOutput, $credentialPattern)
        
        foreach ($match in $matches) {
            $target = $match.Groups[1].Value.Trim()
            $type = $match.Groups[2].Value.Trim()
            $username = $match.Groups[3].Value.Trim()
            
            # Skip if no username (some credentials may not have associated users)
            if (-not $username) { continue }
            
            $entryId = [System.Guid]::NewGuid().ToString()
            
            # Note: Actual password extraction requires native API calls or third-party tools
            # Here we store metadata only, as passwords are encrypted in DPAPI
            $encryptedEntry = @{
                Id = $entryId
                Type = "Network"
                Target = $target
                CredentialType = $type
                Username = $username
                ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            }
            
            $encryptedData += $encryptedEntry
            
            $results += [PSCustomObject]@{
                ID = $entryId
                Type = "Network"
                Browser = "N/A"
                Profile = "N/A"
                URL = $target
                Username = $username
                EncryptionVersion = "DPAPI"
                DataLength = "N/A"
                HexDataPreview = "N/A"
                DateCreated = "N/A"
                DateLastUsed = "N/A"
                TimesUsed = "N/A"
                ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            }
        }
        
        Write-Host "Found $($results.Count) network credentials" -ForegroundColor Green
        return @{
            Summary = $results
            DetailedData = $encryptedData
        }
    } catch {
        Write-Host "Error extracting network credentials: $_" -ForegroundColor Red
        return @{
            Summary = @()
            DetailedData = @()
        }
    }
}

# Main execution
if (-not (Test-Path ".\sqlite3.exe")) {
    if (-not (Install-SQLiteIfNeeded)) {
        Write-Host "SQLite3 is required for browser extraction. Continuing with network credentials only." -ForegroundColor Yellow
    }
}

Write-Host "Starting credential extraction..." -ForegroundColor Green

$allSummaryData = @()
$allDetailedData = @()
$allMasterKeys = @()

# Process browsers
foreach ($browserKey in $browsers.Keys) {
    $browser = $browsers[$browserKey]
    Write-Host "`nProcessing $($browser.Name)..." -ForegroundColor Yellow
    Write-Host "Path: $($browser.Path)" -ForegroundColor Gray
    
    # Extract master key
    $masterKeyInfo = Get-BrowserMasterKey -BrowserDataPath $browser.Path -BrowserName $browser.Name
    if ($masterKeyInfo) {
        $allMasterKeys += $masterKeyInfo
    }
    
    # Extract encrypted passwords
    $extractionResult = Get-BrowserEncryptedPasswords -BrowserDataPath $browser.Path -BrowserName $browser.Name -BrowserKey $browserKey
    $allSummaryData += $extractionResult.Summary
    $allDetailedData += $extractionResult.DetailedData
    
    Write-Host "Finished processing $($browser.Name): $($extractionResult.Summary.Count) entries found" -ForegroundColor Green
}

# Extract network credentials
$networkResult = Get-NetworkCredentials
$allSummaryData += $networkResult.Summary
$allDetailedData += $networkResult.DetailedData

# Export results
if ($allSummaryData.Count -gt 0) {
    Write-Host "`nSuccessfully extracted $($allSummaryData.Count) credentials!" -ForegroundColor Green
    
    # Export summary to CSV
    try {
        $allSummaryData | Export-Csv -Path $CSVPath -NoTypeInformation -Encoding UTF8 -Force
        Write-Host "Summary exported to: $CSVPath" -ForegroundColor Green
    } catch {
        Write-Host "CSV export failed: $_" -ForegroundColor Red
    }
    
    # Export detailed data to JSON
    try {
        $exportData = @{
            Metadata = @{
                ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                TotalEntries = $allSummaryData.Count
                OS = [System.Environment]::OSVersion.VersionString
                User = [System.Environment]::UserName
                Machine = [System.Environment]::MachineName
            }
            MasterKeys = $allMasterKeys
            Credentials = $allDetailedData
        }
        
        $exportData | ConvertTo-Json -Depth 10 | Out-File -FilePath $JSONPath -Encoding UTF8
        Write-Host "Detailed data exported to: $JSONPath" -ForegroundColor Green
    } catch {
        Write-Host "JSON export failed: $_" -ForegroundColor Red
    }
    
    # Summary by type
    Write-Host "`nExtraction Summary by Type:" -ForegroundColor Cyan
    $typeStats = $allSummaryData | Group-Object Type | ForEach-Object {
        [PSCustomObject]@{
            Type = $_.Name
            Count = $_.Count
            Percentage = "$([math]::Round(($_.Count / $allSummaryData.Count) * 100, 2))%"
        }
    }
    
    $typeStats | Format-Table -AutoSize
    
    # Summary by browser (for browser credentials)
    Write-Host "Browser Credential Summary:" -ForegroundColor Cyan
    $browserStats = $allSummaryData | Where-Object { $_.Type -eq "Browser" } | Group-Object Browser | ForEach-Object {
        [PSCustomObject]@{
            Browser = $_.Name
            Count = $_.Count
            Percentage = "$([math]::Round(($_.Count / $allSummaryData.Count) * 100, 2))%"
        }
    }
    
    $browserStats | Format-Table -AutoSize
    
    # Encryption version summary (for browser credentials)
    Write-Host "Encryption Version Summary (Browsers):" -ForegroundColor Cyan
    $encryptionStats = $allSummaryData | Where-Object { $_.Type -eq "Browser" } | Group-Object EncryptionVersion | ForEach-Object {
        [PSCustomObject]@{
            Version = if ($_.Name) { $_.Name } else { "Unknown" }
            Count = $_.Count
            Percentage = "$([math]::Round(($_.Count / $allSummaryData.Count) * 100, 2))%"
        }
    }
    
    $encryptionStats | Format-Table -AutoSize
    
    # Sample of extracted data
    Write-Host "`nSample of extracted data (first 5 entries):" -ForegroundColor Cyan
    $allSummaryData | Select-Object -First 5 | Format-Table -Property Type, Browser, Profile, URL, Username, EncryptionVersion, DataLength -AutoSize
    
    # Important information
    Write-Host "`nIMPORTANT FOR FUTURE DECRYPTION:" -ForegroundColor Yellow
    Write-Host "1. Keep the JSON file safe - it contains all encrypted data" -ForegroundColor Yellow
    Write-Host "2. Browser master keys and network credentials are encrypted with DPAPI" -ForegroundColor Yellow
    Write-Host "3. To decrypt in the future, you'll need:" -ForegroundColor Yellow
    Write-Host "   - This JSON file" -ForegroundColor Yellow
    Write-Host "   - Access to the same Windows user account" -ForegroundColor Yellow
    Write-Host "   - The browser data directories (for browser credentials)" -ForegroundColor Yellow
    Write-Host "4. Different browsers may use different encryption versions" -ForegroundColor Yellow
    Write-Host "5. Network credentials may require additional tools for decryption" -ForegroundColor Yellow
    
} else {
    Write-Host "No credentials found." -ForegroundColor Yellow
}

# Cleanup
Get-ChildItem -Path "." -Filter "temp_*.db" -ErrorAction SilentlyContinue | Remove-Item -Force
Get-ChildItem -Path "." -Filter "temp_*.csv" -ErrorAction SilentlyContinue | Remove-Item -Force
Write-Host "Temporary files cleaned up." -ForegroundColor Green

Write-Host "`nCredential extraction completed." -ForegroundColor Green
