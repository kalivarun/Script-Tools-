# Browser Password Extraction Script
# Basic version that extracts encrypted data first

param(
    [switch]$ExportToCSV,
    [string]$CSVPath = ".\BrowserPasswords.csv"
)

# Function to get passwords from browser using SQLite
function Get-PasswordsFromBrowser {
    param(
        [string]$BrowserName,
        [string]$DataPath
    )
    
    Write-Host "Checking $BrowserName..." -ForegroundColor Yellow
    
    $loginDataPath = Join-Path $DataPath "Default\Login Data"
    if (-not (Test-Path $loginDataPath)) {
        Write-Host "$BrowserName login database not found at $loginDataPath" -ForegroundColor DarkGray
        return @()
    }
    
    # Download sqlite3 if not available
    if (-not (Test-Path ".\sqlite3.exe")) {
        Write-Host "Downloading SQLite3..." -ForegroundColor Yellow
        try {
            $sqliteUrl = "https://www.sqlite.org/2023/sqlite-tools-win32-x86-3430200.zip"
            $tempZip = "sqlite-temp.zip"
            Invoke-WebRequest -Uri $sqliteUrl -OutFile $tempZip -UseBasicParsing
            
            # Extract
            Expand-Archive -Path $tempZip -DestinationPath ".\sqlite-temp" -Force
            Copy-Item ".\sqlite-temp\sqlite-tools-win32-x86-3430200\sqlite3.exe" ".\sqlite3.exe" -Force
            
            Remove-Item $tempZip -Force -ErrorAction SilentlyContinue
            Remove-Item ".\sqlite-temp" -Recurse -Force -ErrorAction SilentlyContinue
            
            Write-Host "SQLite3 downloaded successfully." -ForegroundColor Green
        } catch {
            Write-Warning "Failed to download SQLite3: $($_.Exception.Message)"
            return @()
        }
    }
    
    $results = @()
    
    try {
        # Copy the database to avoid locking issues
        $tempDbPath = "temp_login_data.db"
        Copy-Item $loginDataPath $tempDbPath -Force
        
        # Export data to CSV
        $tempCsvPath = "temp_output.csv"
        $query = "SELECT origin_url, username_value, hex(password_value) as password_hex FROM logins;"
        
        # Execute sqlite3 command
        & .\sqlite3.exe -csv -header $tempDbPath $query > $tempCsvPath
        
        if (Test-Path $tempCsvPath) {
            # Parse CSV output
            $logins = Import-Csv $tempCsvPath
            
            foreach ($login in $logins) {
                $results += [PSCustomObject]@{
                    Browser = $BrowserName
                    URL = $login.origin_url
                    Username = $login.username_value
                    PasswordHex = $login.password_hex
                    Password = "[Encrypted - Requires Decryption]"
                }
            }
            
            Remove-Item $tempCsvPath -Force -ErrorAction SilentlyContinue
        }
        
        Remove-Item $tempDbPath -Force -ErrorAction SilentlyContinue
    } catch {
        Write-Warning "Error processing $BrowserName data: $($_.Exception.Message)"
    }
    
    return $results
}

# Main execution
Write-Host "Browser Password Extraction Tool" -ForegroundColor Green
Write-Host "================================`n" -ForegroundColor Green

# Define browser paths
$browsers = @(
    @{Name = "Google Chrome"; DataPath = "$env:LOCALAPPDATA\Google\Chrome\User Data"},
    @{Name = "Microsoft Edge"; DataPath = "$env:LOCALAPPDATA\Microsoft\Edge\User Data"},
    @{Name = "Brave Browser"; DataPath = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data"}
)

# Ensure browsers are closed
Write-Host "Please ensure all browsers are closed before continuing..." -ForegroundColor Yellow
$response = Read-Host "Press Enter to continue or 'X' to exit"
if ($response -eq 'X' -or $response -eq 'x') { exit }

$allPasswords = @()

foreach ($browser in $browsers) {
    if (Test-Path $browser.DataPath) {
        $passwords = Get-PasswordsFromBrowser -BrowserName $browser.Name -DataPath $browser.DataPath
        $allPasswords += $passwords
    } else {
        Write-Host "$($browser.Name) not found at $($browser.DataPath)" -ForegroundColor DarkGray
    }
}

# Display results
if ($allPasswords.Count -gt 0) {
    Write-Host "`nFound $($allPasswords.Count) saved passwords:`n" -ForegroundColor Green
    
    $allPasswords | Format-Table -Property Browser, URL, Username, Password -AutoSize
    
    # Show a few examples with hex data for debugging
    Write-Host "`nSample encrypted data (first 2 entries):" -ForegroundColor Yellow
    $allPasswords | Select-Object -First 2 | Format-Table -Property Browser, URL, Username, @{Name="PasswordHexLength";Expression={$_.PasswordHex.Length}}
    
    # Export to CSV if requested
    if ($ExportToCSV) {
        try {
            $allPasswords | Export-Csv -Path $CSVPath -NoTypeInformation
            Write-Host "`nPassword data exported to: $CSVPath" -ForegroundColor Green
            Write-Host "This file contains the encrypted password data in hex format." -ForegroundColor Yellow
        } catch {
            Write-Warning "Failed to export to CSV: $($_.Exception.Message)"
        }
    }
} else {
    Write-Host "`nNo passwords found in any browser." -ForegroundColor Yellow
}

Write-Host "`nNote: Passwords are encrypted and require additional steps to decrypt." -ForegroundColor Cyan
Write-Host "The encrypted data has been extracted and can be decrypted using appropriate tools." -ForegroundColor Cyan

# Cleanup
if (Test-Path ".\sqlite3.exe") {
    Write-Host "SQLite3 tool remains in the current directory for future use." -ForegroundColor Gray
}
